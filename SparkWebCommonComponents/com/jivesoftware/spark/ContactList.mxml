<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:flexlib = "flexlib.controls.*" verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="auto" creationComplete="init();">
	<mx:Script>
		<![CDATA[
			import mx.collections.ListCollectionView;
			import mx.core.Application;
			import mx.collections.ICollectionView;
			import org.jivesoftware.xiff.events.LoginEvent;
			import mx.events.CollectionEventKind;
			import mx.events.CollectionEvent;
			import com.jivesoftware.spark.OfflineListGroup;
			import org.jivesoftware.xiff.core.JID;
			import org.jivesoftware.xiff.data.im.RosterGroup;
			import com.jivesoftware.spark.SparkChat;
			import org.jivesoftware.xiff.im.Roster;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.core.UIComponent;
			import com.jivesoftware.spark.managers.StringUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Label;
			import com.jivesoftware.spark.ListGroup;
			import mx.containers.VBox;
			import mx.controls.Button;
			import com.jivesoftware.spark.*;
			import com.jivesoftware.spark.managers.*;
			import com.jivesoftware.spark.ContactListContainer;
			import org.jivesoftware.xiff.data.im.RosterItemVO;
		//	import org.hasseg.externalMouseWheel.*;
			import mx.managers.PopUpManager;
			import mx.core.IFlexDisplayObject;
				
			private var _groupMap:Dictionary = new Dictionary();
			private var _showsOffline:Boolean = false;
			
		  //  [Embed(source="/assets/images/im_unavailable.png")]
	//		private static const unavailable:Class;

			private var currentSearch:String = "";
			
			private var _groups:ListCollectionView = null;
			
			private function updateGroups(evt:CollectionEvent):void
			{
				for each(var rosterGroup:RosterGroup in dataProvider)
				{
					if(!_groupMap[rosterGroup.label])
					{
						var collapsiblePane:ListGroup = new ListGroup();
						collapsiblePane.groupName = rosterGroup.label;
						//collapsiblePane.itemRenderer = new ClassFactory(BuddyRenderer);
						collapsiblePane.alternatingItemColors = ["#AAAAAA", "#BBBBBB"];
						setPendingGroupDataSource(collapsiblePane, rosterGroup);
						
						addChild(collapsiblePane);
						_groupMap[rosterGroup.label] = collapsiblePane;
					}
				}
				var sortedGroups:Array = getChildren().sort(sortGroup);
				
				//TODO: this is pretty sucky for performance. 
				for(var i:uint = 0; i < sortedGroups.length; i++)
				{
					setChildIndex(sortedGroups[i], i);
				}
			}
			
			private function setPendingGroupDataSource(g:ListGroup, ds:RosterGroup):void
			{
				g.addEventListener(FlexEvent.CREATION_COMPLETE, function(evt:*):void { 
					g.dataProvider = ds; 
				});
			}
			
			private function sortGroup(first:ListGroup, second:ListGroup):int
			{
				if(first is OfflineListGroup)
					return 1;
				else if(second is OfflineListGroup)
					return -1;
				
				var group1:String = first.groupName.toLowerCase();
				var group2:String = second.groupName.toLowerCase();
				
	  			if (group1 < group2) return -1;
	  			if (group1 > group2) return 1;
	  			return 0;
			}
			
			[Bindable]
			public function get searchString():String
			{
				return currentSearch;
			}
			
			public function set searchString(str:String):void 
			{
				currentSearch = str ? str.toLowerCase() : "";
				
				for each(var group:ListGroup in getChildren())
				{
					group.filterBy(currentSearch);
				}
			}

			public function get buddies():Array 
			{
				var result:Array = [];
				for each(var item:* in getChildren()) 
				{
					if(!item is ListGroup) 
						continue;
					result = result.concat((item as ListGroup).buddyRenderers);
				}
				return result;
			}

			private function init():void 
			{
			//	SparkManager.registerForScrollEvents(acc);
			//	addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, singleClicked);
				
			}
			
			public function set dataProvider(provider:Object):void
			{
				if(!provider)
					provider = new ArrayCollection();
				else if(provider is Array)
					provider = new ArrayCollection(provider as Array);
				else if(!provider is ListCollectionView)
					provider = new ArrayCollection(); //can't get valid data, set null
				
				if(dataProvider)
					dataProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, updateGroups);
				_groups = provider as ListCollectionView;
				dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, updateGroups);
				updateGroups(null);
			}
			
			public function get dataProvider():Object
			{
				return _groups;
			}
			
			public function set showsOfflineContacts(flag:Boolean):void
			{
				if(_showsOffline == flag)
					return;
				
				if(flag)
				{
					var oGroup:OfflineListGroup = new OfflineListGroup();
					oGroup.alternatingItemColors = ["#AAAAAA", "#BBBBBB"];
					oGroup.groupName = " "; //trigger an update
					addChild(oGroup);
				} 
				else
				{
					for each(var listGroup:ListGroup in getChildren())
					{
						if(listGroup is OfflineListGroup)
							removeChild(listGroup);
					}
				}
				_showsOffline = flag;
			}
			
			public function get showsOfflineContacts():Boolean
			{
				return _showsOffline;
			}
		]]>
	</mx:Script>
</mx:VBox>
	