<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:Accordion xmlns:mx="http://www.adobe.com/2006/mxml"
			  color="white" 
			  headerRenderer="com.jivesoftware.spark.MUCListAccordionHeader"
			  borderStyle="none"
			  cornerRadius="5" 
			  backgroundAlpha="0.0" 
			  verticalScrollPolicy="auto" 
			  horizontalScrollPolicy="off" 
			  focusEnabled="false" 
			  creationComplete="init()">

		<mx:Script>
			<![CDATA[
				import com.jivesoftware.spark.managers.ChatManager;
				import org.jivesoftware.xiff.events.BookmarkRetrievedEvent;
				import org.jivesoftware.xiff.bookmark.GroupChatBookmark;
				import org.jivesoftware.xiff.events.BookmarkChangedEvent;
				import com.jivesoftware.spark.managers.MUCManager;
				import com.jivesoftware.spark.utils.UniqueingQueue;
				import org.jivesoftware.xiff.core.JID;
				import mx.collections.ArrayCollection;
				import com.jivesoftware.spark.managers.SparkManager;
				import org.jivesoftware.xiff.bookmark.BookmarkManager;
				import com.jivesoftware.spark.CreateRoomWindow;
				import com.jivesoftware.spark.managers.Localizator;
				import mx.events.IndexChangedEvent;
				
				private var _bookmarkManager:BookmarkManager;
				public var createRoomWindow:CreateRoomWindow;
				
				public function init():void
				{
		 			//list.addEventListener(IndexChangedEvent.CHANGE, function(evt:IndexChangedEvent):void { (evt.relatedObject as MUCRoomList).populate(false); });
				}
				
				public function loadBookmarks(evt:*=null):void
				{
					_bookmarkManager = SparkManager.bookmarkManager;
			 		_bookmarkManager.addEventListener(BookmarkRetrievedEvent.BOOKMARK_RETRIEVED, handleBookmarks);
			 		_bookmarkManager.fetchBookmarks();
				}
				
				protected function handleBookmarks(event:Event):void 
				{
					var bookmarks:UniqueingQueue = new UniqueingQueue(_bookmarkManager.bookmarks.groupChatBookmarks);
					/*MUCManager.manager.findConferenceService(SparkManager.connectionManager.connection.jid, function(jid:JID):void {
						SparkManager.bookmarkManager.addGroupChatBookmark(new GroupChatBookmark(jid.toString(), jid));
						ContactListContainer.conferenceList.addConferenceServer(jid);
						ContactListContainer.conferenceList.selectedChild.populate(false);
						var so:SharedObject = SharedObject.getLocal("savedData");
						if(!so.data.mucServers)
							so.data.mucServers = new UniqueingQueue();
						
						//importing the old array based data
						if(!so.data.mucServers is UniqueingQueue)
							so.data.mucServers = new UniqueingQueue(so.data.mucServers);
		 				
						so.data.mucServers.push(jid);
					});*/
					for each(var bookmark:GroupChatBookmark in bookmarks)
					{
						var text:String = bookmark.jid.toString();
						if (bookmark.jid.toString().indexOf("@") < 0)
						{
							addConferenceServer(bookmark.jid);
						}
						else
						{
							if (bookmark.autoJoin)
								ChatManager.sharedInstance.queueRoom(bookmark.jid);
							
							
							// Automatically add the conference server that a bookmarked room resides on to this MUCList
							var jid:JID = bookmark.jid;
							var roomList:MUCRoomList = addConferenceServer(jid);
							roomList.addItems([{jid:bookmark.jid, name:bookmark.name}]);
						}	
					}
					
			//		if(selectedChild)
			//			selectedChild.populate(false);
				}
				
				public function addConferenceServer(conferenceJID:JID):MUCRoomList
				{
					var domain:String = conferenceJID.domain;
	 				for each(var item:MUCRoomList in getChildren())
	 				{
	 					if(item.label == domain)
	 						return item;
	 				}
	 				
	 				var serverList:MUCRoomList = new MUCRoomList();
	 						
					SparkManager.bookmarkManager.addEventListener(BookmarkChangedEvent.GROUPCHAT_BOOKMARK_ADDED, function(evt:BookmarkChangedEvent):void {
						var name:String = evt.groupchatBookmark.name;
						var j:JID = evt.groupchatBookmark.jid;
						if(j.domain == serverList.jid.domain)
							serverList.addItems([{jid:j, name:name}]);
					});
					
	 				addChild(serverList);
	 				serverList.jid = new JID(domain);
	 				return serverList;
	 			}
	 			
	 			public function removeConferenceServer(jid:JID):void
	 			{
	 				for each(var item:MUCRoomList in getChildren())
	 				{
	 					if(item.label == jid.toString())
	 						removeChild(item);
	 				}
	 			}
				
				public function createRoom(server:String):void
				{
					CreateRoomWindow.showCreateRoomWindow(server);
				}
				
				public function getServerList(conferenceServerAddress:String):MUCRoomList
				{
					for each(var item:MUCRoomList in getChildren())
	 				{
	 					if(item.label == conferenceServerAddress)
	 						return item;
	 				}
	 				return null;
				}
			]]>
		</mx:Script>
</mx:Accordion>	