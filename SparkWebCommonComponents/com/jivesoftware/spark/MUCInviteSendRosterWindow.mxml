<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<comp:ColorShiftingTitleWindow xmlns:comp="com.jivesoftware.spark.*" xmlns:mx="http://www.adobe.com/2006/mxml" color="white"
	title="{Localizator.getText('title.muc.invite.send.roster.window')}" showCloseButton="true" close="close()" 
	creationComplete="init()">
	
	<mx:Style>
		.title {
			fontWeight: bold;
			fontSize: 12pt;
		}
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import org.jivesoftware.xiff.data.Presence;
			import mx.collections.ListCollectionView;
			import mx.collections.Sort;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			
			import com.jivesoftware.spark.managers.SparkManager;
			import com.jivesoftware.spark.managers.Localizator;

			import org.jivesoftware.xiff.events.RosterEvent;
			import org.jivesoftware.xiff.data.im.RosterItemVO;
			
			[Event("rosterContactsChosen")]
			
			[Bindable]
			private var rosterItems:ListCollectionView;
			
			[Bindable]
			private var dropShadowFilters:Array = [new DropShadowFilter(0, 45, 0.0, 1.0, 6.0)];
		
			private function init():void 
			{
            	titleTextField.filters = dropShadowFilters;
           		titleTextField.styleName = "title";
           		if(!rosterItems)
				{
					rosterItems = new ListCollectionView(SparkManager.roster);
	
					rosterItems.filterFunction = function(item:RosterItemVO):Boolean {
						return item.show != Presence.UNAVAILABLE_TYPE;
					}
	
					rosterItems.sort = new Sort();
					rosterItems.refresh();
				}
			}
			
			private function close():void {
				PopUpManager.removePopUp(this);
			}
			
			private function rosterContactsChosen():void 
			{
				// The only reason we dispatch an event of type RosterEvent is because we can use it to set a data field.
				var event:RosterEvent = new RosterEvent("rosterContactsChosen");
				event.data = jidList.selectedItems;
				dispatchEvent(event);
			}
		]]>
	</mx:Script>
	
<mx:Label text="{Localizator.getText('label.select.roster.contacts')}" styleName="title" paddingTop="10" paddingBottom="5" />

<mx:List id="jidList" dataProvider="{rosterItems}" itemRenderer="com.jivesoftware.spark.BuddyRenderer" allowMultipleSelection="true" color="black" width="100%" rollOverColor="0xFFCC00" selectionColor="0xDDB000" alternatingItemColors="{[0xAAAAAA, 0xBBBBBB]}" />

<mx:ControlBar horizontalAlign="right">
	<mx:Button color="white" filters="{dropShadowFilters}" label="{Localizator.getText('label.cancel')}"
			   click="{close();}" />
	<mx:Button id="okButton" color="white" filters="{dropShadowFilters}" label="{Localizator.getText('label.ok')}"
			   click="{rosterContactsChosen(); close();}"/>
</mx:ControlBar>

</comp:ColorShiftingTitleWindow>
