<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<comp:ColorShiftingPanel
	title=""
	xmlns:comp="com.jivesoftware.spark.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	styleName="roundedPanel"
    initialize="loadSavedServers()"
	creationComplete="focusUsername()">
<mx:Style>
	.formLabel {
		font-size: 12;
		color: black;
		font-weight:bold;
	}
	.titleText {
		font-size: 14;
		color: black;
		font-weight:bold;
	}
</mx:Style>
<mx:Script>
	<![CDATA[
		import mx.controls.Image;
		import mx.core.UIComponent;
		import org.jivesoftware.xiff.events.LoginEvent;
		import com.jivesoftware.spark.utils.UniqueingQueue;
		import org.jivesoftware.xiff.core.XMPPBOSHConnection;
		import mx.collections.ArrayCollection;
		import org.jivesoftware.xiff.events.XIFFErrorEvent;
		import mx.core.Application;
		import org.jivesoftware.xiff.events.RegistrationSuccessEvent;
		import org.jivesoftware.xiff.data.IQ;
		import org.jivesoftware.xiff.events.ConnectionSuccessEvent;
		import org.jivesoftware.xiff.core.XMPPConnection;
		import com.jivesoftware.spark.managers.*;
		import mx.managers.FocusManager;
		import org.jivesoftware.xiff.data.Extension;
		
		//private var con:XMPPConnection;
		private var serverURL:String;
		private var username:String;
		private var password:String;
		private var policyFileURL:String;
		private var savedServers:UniqueingQueue;
		private var errorFilters:Array = [new GlowFilter(0xFF9B26)];
		
		[Bindable]
		private var dropShadowFilters:Array = [new DropShadowFilter(0, 45, 0.0, 1.0, 6.0)];
	
		[Embed(source='/assets/images/sparkweb.png')]
		private static const defaultTitleImage:Class;
		
		private var _showTitleBar:Boolean = true;
		private var _titleImage:Object = defaultTitleImage;
		private var _titleText:String = null;
		private var _showCreateAccount:Boolean = true;

		private function loginToServer():void {
			if(userNameField.length == 0 || passwordField.length == 0 || serverBox.text == "") 
			{
				showErrorText(Localizator.getText('message.incomplete.fields'));
				return;
			}
				
			var connectionManager:ConnectionManager = SparkManager.connectionManager;
				
			var username:String = userNameField.text;
			var passwordStr:String = passwordField.text;
			serverURL = serverBox.text;
			if(serverURL.indexOf(":") > -1 && connectionManager.connection is XMPPBOSHConnection)
			{
				var parts:Array = serverURL.split(":");
				serverURL = parts[0];
				connectionManager.connection.port = parts[1];
			}

			if (policyFileURL)
				Security.loadPolicyFile(policyFileURL);
			else
				Security.loadPolicyFile("xmlsocket://"+serverURL+":5229");

			Security.allowDomain( "*" );
			Security.allowInsecureDomain("*");

			loginButton.enabled = false;
			
			connectionManager.connection.addEventListener(ConnectionSuccessEvent.CONNECT_SUCCESS, function(evt:ConnectionSuccessEvent):void {
				var so:SharedObject = SharedObject.getLocal("savedData");
	 			var temp:* = new UniqueingQueue(savedServers);
	 			temp.unshift(serverURL);
	 			servers = temp;
			});
			connectionManager.login(username, passwordStr, serverURL);
		}
		
		public function focusUsername():void 
		{
			var configVal:String = SparkManager.getConfigValueForKey("username");
			if(configVal)
				userNameField.text = configVal;
			configVal = SparkManager.getConfigValueForKey("password");
			if(configVal)
				passwordField.text = configVal;
			configVal = SparkManager.getConfigValueForKey("policyFileURL");
			if (configVal)
				policyFileURL = configVal;
			configVal = SparkManager.getConfigValueForKey("autologin");
			if(configVal == "true")
			{
				configVal = SparkManager.getConfigValueForKey("server");
				if(configVal)
					serverBox.text = configVal;
				loginToServer();
			}
			else
				focusManager.setFocus(userNameField);
		}
		
		public function reset():void 
		{
			if(loginButton.enabled == false)
			{
				loginButton.enabled = true;
				focusManager.setFocus(userNameField);
				
				userNameField.filters = errorFilters;
				passwordField.filters = errorFilters;
			}
		}
		
		public function showErrorText(text:String):void {
			errorLabel.text = text;
		}
		
		private function handleKeyUp(event:KeyboardEvent):void 
		{
			if(event.keyCode == Keyboard.ENTER)
			{
				loginToServer();
			}
		}
		
		protected function loadSavedServers():void
		{
 			var saved:UniqueingQueue = new UniqueingQueue(SharedObject.getLocal("savedData").data.savedLoginServers); 
 			var adminServer:String = SparkManager.getConfigValueForKey("server");
			if(adminServer && adminServer.length > 0 && saved.length == 0)
				saved.unshift(adminServer);
			
			servers = saved;
		}
		
		public function set servers(contents:UniqueingQueue):void
		{
			savedServers = contents;
			SharedObject.getLocal("savedData").data.savedLoginServers = savedServers;
		}		

		[Bindable]
		public function get servers():UniqueingQueue 
		{
			return savedServers;
		}
		
		public function set titleImage(image:Object):void
		{
			_titleImage = (image != "" ? image : null);
		}		

		[Bindable]
		public function get titleImage():Object 
		{
			return _titleImage;
		}
		
		public function set titleText(text:String):void
		{
			_titleText = (text != "" ? text : null);
		}		

		[Bindable]
		public function get titleText():String 
		{
			return _titleText;
		}
		
		public function set showTitleBar(setting:Boolean):void
		{
			_showTitleBar = setting;
		}		

		[Bindable]
		public function get showTitleBar():Boolean 
		{
			return _showTitleBar;
		}
		
		public function set showCreateAccount(setting:Boolean):void
		{
			_showCreateAccount = setting;
		}		

		[Bindable]
		public function get showCreateAccount():Boolean 
		{
			return _showCreateAccount;
		}
		
		
	]]>
</mx:Script>
<mx:HBox width="100%" paddingLeft="20" paddingTop="10" paddingRight="12" visible="{showTitleBar}">
	<mx:Image source="{titleImage}" visible="{titleImage != null}"/>
	<mx:Text color="white" filters="{dropShadowFilters}" text="{titleText}" visible="{titleText != null}" styleName="titleText"/>
	<mx:Spacer width="100%" />
	<mx:LinkButton alpha="0.5" selectionColor="#AAAAAA" color="white" rollOverColor="#888888" textRollOverColor="white" id="registerButton" label="{Localizator.getText('message.create.account')}" click="Application.application.showCreateAccount();" visible="{showCreateAccount}" />	
</mx:HBox>
<mx:Grid id="grid" verticalGap="1" horizontalGap="0" width="100%" height="100%" paddingLeft="20" paddingRight="20" paddingTop="17" paddingBottom="15" styleName="canvas"  >
        
        	<mx:GridRow>
        		<mx:GridItem width="150" colSpan="2">
        			 <mx:Label color="white" filters="{dropShadowFilters}" text="{Localizator.getText('label.username')}" styleName="formLabel" />
        		</mx:GridItem>
        		<mx:GridItem width="150">
        			 <mx:Label color="white" filters="{dropShadowFilters}" text="{Localizator.getText('label.server')}" styleName="formLabel" />
        		</mx:GridItem>
        		<mx:GridItem paddingLeft="20" id="passwordLabelItem"> 
        			   <mx:Label id="passwordLabel" color="white" filters="{dropShadowFilters}" text="{Localizator.getText('label.password')}" styleName="formLabel" />
        		</mx:GridItem>
        	</mx:GridRow>
        	
        	<mx:GridRow>
        		<mx:GridItem width="118" paddingRight="0">
        	      <mx:TextInput fontSize="11" width="100%" id="userNameField" color="black" paddingRight="0"  />
        		</mx:GridItem>
        		<mx:GridItem paddingLeft="2" width="10">
        			 <mx:Label fontSize="11" paddingLeft="1" color="#DDDDDD" width="20" text="@" />
        		</mx:GridItem>
        		<mx:GridItem paddingTop="-1">
        			<mx:ComboBox id="serverBox" fontSize="11" focusRoundedCorners="br, tr" paddingLeft="-2" borderColor="gray" fontWeight="normal" width="100%" selectedIndex="0" editable="true" dataProvider="{servers}" />
        		</mx:GridItem>
        		<mx:GridItem paddingLeft="20" id="passwordFieldItem">
        			<mx:TextInput fontSize="11" width="100%" id="passwordField" color="black"  displayAsPassword="true" keyUp="handleKeyUp(event)" />
        		</mx:GridItem>
        	</mx:GridRow>        	
        	<mx:GridRow paddingTop="30">
        		<mx:GridItem colSpan="3">
        			<mx:Label fontSize="12" fontWeight="bold" filters="{dropShadowFilters}" id="errorLabel" color="#FF9B26" />
        		</mx:GridItem>
        		<mx:GridItem id="loginItem" horizontalAlign="right">
        			<mx:Button width="60" textAlign="center" color="white" filters="{dropShadowFilters}" id="loginButton" label="{Localizator.getText('label.login')}" click="loginToServer()" />
        		</mx:GridItem>
        	</mx:GridRow>
        </mx:Grid>
</comp:ColorShiftingPanel>
