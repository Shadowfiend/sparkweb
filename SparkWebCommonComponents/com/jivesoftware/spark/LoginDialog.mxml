<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<comp:ColorShiftingPanel
	title=""
	xmlns:comp="com.jivesoftware.spark.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	styleName="roundedPanel"
    initialize="loadSavedServers()"
	creationComplete="focusUsername()">
<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import mx.controls.Image;
		import mx.core.UIComponent;
		import org.jivesoftware.xiff.events.LoginEvent;
		import com.jivesoftware.spark.utils.UniqueingQueue;
		import org.jivesoftware.xiff.core.XMPPBOSHConnection;
		import mx.collections.ArrayCollection;
		import org.jivesoftware.xiff.events.XIFFErrorEvent;
		import mx.core.Application;
		import org.jivesoftware.xiff.events.RegistrationSuccessEvent;
		import org.jivesoftware.xiff.data.IQ;
		import org.jivesoftware.xiff.events.ConnectionSuccessEvent;
		import org.jivesoftware.xiff.core.XMPPConnection;
		import com.jivesoftware.spark.managers.*;
		import mx.managers.FocusManager;
		import org.jivesoftware.xiff.data.Extension;
		
		//private var con:XMPPConnection;
		private var serverURL:String;
		private var username:String;
		private var password:String;
		private var policyFileURL:String;
		private var savedServers:UniqueingQueue;
		
		[Bindable] 
		private var dropShadowFilters:Array = [new DropShadowFilter(.4, .4, 0.4, .4, .4)];
	
		[Embed(source='/assets/images/sparkweb.png')]
		private static const defaultTitleImage:Class;
		
		private var _showTitleBar:Boolean = true;
		private var _titleImage:Object = defaultTitleImage;
		private var _titleText:String = null;
		private var _showCreateAccount:Boolean = true;

		private function loginToServer():void {
			if(userNameField.length == 0 || passwordField.length == 0) 
			{
				showErrorText(Localizator.getText('message.incomplete.fields'));
				return;
			}
				
			var username:String = userNameField.text;
			var passwordStr:String = passwordField.text;

			loginButton.enabled = false;
			SparkManager.accountManager.loginAccount(username,passwordStr,doJabberLogin,failedLogin);

			
		}
		
		private function failedLogin(errors:Object)
		{
			showErrorText("Invalid username/password");
			loginButton.enabled = true;
		}
		
		private function doJabberLogin(results:Object):void
		{
		
			var connectionManager:ConnectionManager = SparkManager.connectionManager;
			var username:String = userNameField.text;
			var passwordStr:String = passwordField.text;
			serverURL = SparkManager.getConfigValueForKey("server");
			if(serverURL.indexOf(":") > -1 && connectionManager.connection is XMPPBOSHConnection)
			{
				var parts:Array = serverURL.split(":");
				serverURL = parts[0];
				connectionManager.connection.port = parts[1];
			}

			if (policyFileURL)
				Security.loadPolicyFile(policyFileURL);
			else
				Security.loadPolicyFile("xmlsocket://"+serverURL+":5229");

			Security.allowDomain( "*" );
			Security.allowInsecureDomain("*");

			connectionManager.login(username, passwordStr, serverURL);
		}
		
		public function focusUsername():void 
		{
			var configVal:String = SparkManager.getConfigValueForKey("username");
			if(configVal)
				userNameField.text = configVal;
			configVal = SparkManager.getConfigValueForKey("password");
			if(configVal)
				passwordField.text = configVal;
			configVal = SparkManager.getConfigValueForKey("policyFileURL");
			if (configVal)
				policyFileURL = configVal;
			configVal = SparkManager.getConfigValueForKey("autologin");
			if(configVal == "true")
				loginToServer();
			else
				focusManager.setFocus(userNameField);
			focusManager.setFocus(userNameField);
			userNameField.setSelection(0,0);
		}
		
		public function reset():void 
		{
			if(loginButton.enabled == false)
			{
				loginButton.enabled = true;
				focusManager.setFocus(userNameField);
				
			}
		}
		
		public function showErrorText(text:String):void {
			errorLabel.text = text;
			
			loginButton.enabled = true;
		}
		
		private function handleKeyUp(event:KeyboardEvent):void 
		{
			if(event.keyCode == Keyboard.ENTER)
			{
				loginToServer();
			}
		}
		
		protected function loadSavedServers():void
		{
 			var saved:UniqueingQueue = new UniqueingQueue(SharedObject.getLocal("savedData").data.savedLoginServers); 
 			var adminServer:String = SparkManager.getConfigValueForKey("server");
			if(adminServer && adminServer.length > 0 && saved.length == 0)
				saved.unshift(adminServer);
			
			servers = saved;
		}
		
		public function set servers(contents:UniqueingQueue):void
		{
			savedServers = contents;
			SharedObject.getLocal("savedData").data.savedLoginServers = savedServers;
		}		

		[Bindable]
		public function get servers():UniqueingQueue 
		{
			return savedServers;
		}
		
		public function set titleImage(image:Object):void
		{
			_titleImage = (image != "" ? image : null);
		}		

		[Bindable]
		public function get titleImage():Object 
		{
			return _titleImage;
		}
		
		public function set titleText(text:String):void
		{
			_titleText = (text != "" ? text : null);
		}		

		[Bindable]
		public function get titleText():String 
		{
			return _titleText;
		}
		
		public function set showTitleBar(setting:Boolean):void
		{
			_showTitleBar = setting;
		}		

		[Bindable]
		public function get showTitleBar():Boolean 
		{
			return _showTitleBar;
		}
		
		public function set showCreateAccount(setting:Boolean):void
		{
			_showCreateAccount = setting;
		}		

		[Bindable]
		public function get showCreateAccount():Boolean 
		{
			return _showCreateAccount;
		}
		
		
	]]>
</mx:Script>
<mx:HBox styleName="titleBar" visible="{showTitleBar}">
	<mx:Image source="{titleImage}" visible="{titleImage != null}"/>
	<mx:Spacer />
	<mx:LinkButton color="#444444" styleName="gotoRegister" id="registerButton" label="{Localizator.getText('message.create.account')}" click="Application.application.showCreateAccount();" visible="{showCreateAccount}" /> 
</mx:HBox>
<mx:Grid id="grid" styleName="loginGrid">
        
        	<mx:GridRow>
        		<mx:GridItem styleName="userLabelGrid">
        			 <mx:Label color="#616363" filters="{dropShadowFilters}" text="{Localizator.getText('label.username')}" styleName="formLabel" />
        		</mx:GridItem>
        		<mx:GridItem id="passwordLabelItem" styleName="passwordLabelGrid"> 
        			   <mx:Label id="passwordLabel" color="#616363" filters="{dropShadowFilters}" text="{Localizator.getText('label.password')}" styleName="formLabel" />
        		</mx:GridItem>
        	</mx:GridRow>
        	
        	<mx:GridRow>
        		<mx:GridItem  styleName="userFieldGrid">
        	      <mx:TextInput id="userNameField" styleName="userTextInput" />
        		</mx:GridItem>
        		<mx:GridItem id="passwordFieldItem" styleName="passwordTextGrid">
        			<mx:TextInput id="passwordField" displayAsPassword="true" keyUp="handleKeyUp(event)" styleName="passwordInput"/>
        		</mx:GridItem>
        	</mx:GridRow>        	
        	<mx:GridRow styleName="paddedGridRow">
        		<mx:GridItem colSpan="2">
        			<mx:Label  id="errorLabel" styleName="errorLabel" />
        		</mx:GridItem>
        	</mx:GridRow>
        	<mx:GridRow styleName="paddedGridRow">
        	  	<mx:GridItem />
        		<mx:GridItem id="loginItem" styleName="loginItem">
        			<mx:Button filters="{dropShadowFilters}" id="loginButton"  label="{Localizator.getText('label.login')}" click="loginToServer()" />
        		</mx:GridItem>
        	</mx:GridRow>
        </mx:Grid>
</comp:ColorShiftingPanel>
