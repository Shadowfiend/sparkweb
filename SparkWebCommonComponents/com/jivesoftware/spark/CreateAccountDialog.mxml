<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<comp:ColorShiftingPanel
	title=""
	xmlns:comp="com.jivesoftware.spark.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="loadServers()"
	styleName="roundedPanel">
<mx:Style>
	.formLabel {
		font-size: 12;
		color: black;
		font-weight:bold;
	}
</mx:Style>
<mx:Script>
	<![CDATA[
		import org.jivesoftware.xiff.events.DisconnectionEvent;
		import mx.collections.ArrayCollection;
		import org.jivesoftware.xiff.events.XIFFErrorEvent;
		import mx.core.Application;
		import org.jivesoftware.xiff.events.RegistrationSuccessEvent;
		import org.jivesoftware.xiff.data.IQ;
		import org.jivesoftware.xiff.events.ConnectionSuccessEvent;
		import org.jivesoftware.xiff.core.XMPPSocketConnection;
		import com.jivesoftware.spark.managers.*;
		import mx.managers.FocusManager;
	
		private var con:XMPPSocketConnection = new XMPPSocketConnection();
		private var serverURL:String;	
		private var username:String;
		private var password:String;
		[Bindable]
		private var servers:Array = [];
		
		private static const dropShadow:DropShadowFilter = new DropShadowFilter(0, 45, 0.0, 1.0, 6.0);
		
		private function connect():void 
		{
			username = userNameField.text;
			password = passwordField.text;
			serverURL = serverBox.text;
			
			var confirmPassword:String = confirmPasswordField.text;
			if(password != confirmPassword)
			{
				showErrorText(Localizator.getText("message.passwords.do.not.match"));
				return;
			}
			
			if(userNameField.length == 0 || passwordField.length == 0 || serverBox.text == "") 
			{
				showErrorText(Localizator.getText('message.incomplete.fields'));
				return;
			}
			
			// Save server URL for later.
			if(servers.indexOf(serverURL) == -1)
			{
				var so:SharedObject = SharedObject.getLocal("savedData");
	 			so.data.savedAccountCreationServers.unshift(serverURL);
			}
			
			// Register event listeners
			con.addEventListener("connection", createAccount);
			con.addEventListener("disconnection", onDisconnection);
			con.addEventListener("error", creationError);
			
			// Create Account
			con.server = serverURL;
			con.connect("standard");
		}
		
		public function focusUsername():void {
			focusManager.setFocus(userNameField);
		}
		
		private function createAccount(event:Event):void 
		{
			var accountManager:AccountManager = new AccountManager(con);
			accountManager.createAccount(username, password, creationResults);
		}
		
		private function creationError(event:Event):void 
		{
			con.removeEventListener("error", creationError);
			showErrorText(Localizator.getText("message.account.creation.failed"));
		}
		
		private function onDisconnection(event:DisconnectionEvent):void 
		{
			con.removeEventListener("disconnection", onDisconnection);
			showErrorText(Localizator.getText("message.service.unavailable"));
		}
		
		private function creationResults(iq:IQ):void 
		{
			if(iq.type == IQ.RESULT_TYPE)
			{
				// This is not actually "error" text, but it is convenient to use the error label to report the account creation.
				Application.application.loginDialog.showErrorText(Localizator.getText("message.account.creation.succeeded"));
				
				Application.application.showLogin(userNameField.text, passwordField.text, con.server);
			}
			else {
		    	showErrorText(Localizator.getText("message.account.creation.failed"));
			}
		}
		
		public function showErrorText(text:String):void {
			errorLabel.text = text;
		}
		
		protected function loadServers():void
		{
			var so:SharedObject = SharedObject.getLocal("savedData");
 			servers = so.data.savedAccountCreationServers;
 			if(!servers)
			{
 				servers = []; 
 				so.data.savedAccountCreationServers = servers;
 			}
 			var adminServer:String = SparkManager.getConfigValueForKey("server");
			if(adminServer && adminServer.length > 0 && servers.indexOf(adminServer) == -1)
				servers.unshift(adminServer);
		}
		
		private function handleKeyUp(event:KeyboardEvent):void {
			if(event.keyCode == Keyboard.ENTER){
				connect();
			}
		}
	]]>
</mx:Script>
	<mx:HBox width="100%" paddingLeft="20" paddingTop="10" paddingRight="20">
		<mx:Image source="@Embed(source='/assets/images/sparkweb.png')"/>
		<mx:Spacer width="100%" />
		<mx:Label paddingTop="13" color="white" fontSize="24" text="{Localizator.getText('message.create.account')}" filters="{[dropShadow]}" styleName="formLabel" />
	</mx:HBox>
	
	<mx:Grid id="grid" verticalGap="1" horizontalGap="0" width="100%" height="100%" paddingLeft="20" paddingRight="20" paddingTop="17" paddingBottom="15" styleName="canvas"  >
        
		<mx:GridRow>
			<mx:GridItem width="150" colSpan="2">
				 <mx:Label color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.username')}" styleName="formLabel" />
			</mx:GridItem>
			<mx:GridItem width="150">
				 <mx:Label color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.server')}" styleName="formLabel" />
			</mx:GridItem>
			<mx:GridItem paddingLeft="20"> 
				   <mx:Label id="passwordLabel" color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.password')}" styleName="formLabel" />
			</mx:GridItem>
		</mx:GridRow>
		
		<mx:GridRow>
			<mx:GridItem width="118" paddingRight="0">
		      <mx:TextInput fontSize="11" width="100%" id="userNameField" color="black" paddingRight="0"  />
			</mx:GridItem>
			<mx:GridItem paddingLeft="2" width="10">
				 <mx:Label fontSize="11" paddingLeft="1" color="#DDDDDD" width="20" text="@" />
			</mx:GridItem>
			<mx:GridItem paddingTop="-1">
				<mx:ComboBox id="serverBox" fontSize="11" focusRoundedCorners="br, tr" paddingLeft="-2" borderColor="gray" fontWeight="normal" width="100%" selectedIndex="0" editable="true" dataProvider="{servers}" />
			</mx:GridItem>
			<mx:GridItem paddingLeft="20">
				<mx:TextInput fontSize="11" width="100%" id="passwordField" color="black"  displayAsPassword="true" />
			</mx:GridItem>
		</mx:GridRow>
		
		<mx:GridRow>
			<mx:GridItem />
			<mx:GridItem />
			<mx:GridItem />
			<mx:GridItem paddingLeft="20" paddingTop="8">
				<mx:Label color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.confirm')}" styleName="formLabel" />
			</mx:GridItem>
		</mx:GridRow>
		
		<mx:GridRow>
			<mx:GridItem />
			<mx:GridItem />
			<mx:GridItem />
			<mx:GridItem paddingLeft="20">
				<mx:TextInput fontSize="11" width="100%" id="confirmPasswordField" color="black"  displayAsPassword="true" keyUp="handleKeyUp(event)" />
			</mx:GridItem>
		</mx:GridRow>
		
		       	
		<mx:GridRow paddingTop="30">
			<mx:GridItem colSpan="3">
				<mx:Label fontSize="12" fontWeight="bold" filters="{[dropShadow]}" id="errorLabel" color="#FF9B26" />
			</mx:GridItem>
			<mx:GridItem id="loginItem" horizontalAlign="right">
				<mx:Button id="cancelButton" textAlign="center" color="white" filters="{[dropShadow]}" label="{Localizator.getText('label.cancel')}" click="Application.application.showLogin();" />
		<mx:Button id="createAccountButton" textAlign="center" color="white" filters="{[dropShadow]}" label="{Localizator.getText('label.create')}" click="connect()" />
			</mx:GridItem>
		</mx:GridRow>
        	
	</mx:Grid>
</comp:ColorShiftingPanel>
