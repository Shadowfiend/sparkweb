<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<comp:ColorShiftingPanel
	title=""
	xmlns:comp="com.jivesoftware.spark.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="loadServers()"
	styleName="roundedPanel">
<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import com.inquus.spark.event.CreateAccountEvent;
		import org.jivesoftware.xiff.core.XMPPConnection;
		import org.jivesoftware.xiff.events.DisconnectionEvent;
		import mx.collections.ArrayCollection;
		import org.jivesoftware.xiff.events.XIFFErrorEvent;
		import mx.core.Application;
		import org.jivesoftware.xiff.events.RegistrationSuccessEvent;
		import org.jivesoftware.xiff.data.IQ;
		import org.jivesoftware.xiff.events.ConnectionSuccessEvent;
		import org.jivesoftware.xiff.core.XMPPSocketConnection;
		import com.jivesoftware.spark.managers.*;
		import mx.managers.FocusManager;
	
		private var con:XMPPConnection;
		private var serverURL:String;	
		private var username:String;
		private var password:String;
		private var email:String;
		[Bindable]
		private var servers:Array = [];
		
		[Embed(source='/assets/images/sparkweb.png')]
		private static const defaultTitleImage:Class;
		
		private var _titleImage:Object = defaultTitleImage;
		
		private static const dropShadow:DropShadowFilter = new DropShadowFilter(0, 45, 0.0, 1.0, 6.0);
		
		private var _showLogin:Boolean = true;
		private var myName:String;
		private function connect():void 
		{
			username = userNameField.text;
			password = passwordField.text;
			
			email = emailField.text;
			
				myName = username;
			serverURL = SparkManager.getConfigValueForKey("server");
			
			con = SparkManager.connectionManager.connection;
			
			// Register event listeners
			con.addEventListener("connection", createAccount);
			con.addEventListener("disconnection", onDisconnection);
			con.addEventListener("error", creationError);
			
			// Create Account
			con.server = serverURL;
			con.connect("standard");
		}
		
		public function focusUsername():void {
			focusManager.setFocus(userNameField);
		}
		
		public function cleanupConnections():void
		{
			// Register event listeners
			if(con != null){
				con.removeEventListener("connection", createAccount);
				con.removeEventListener("disconnection", onDisconnection);
				con.removeEventListener("error", creationError);
			}
		}
		
		private function createAccount(event:Event):void 
		{
			var accountManager:AccountManager = SparkManager.accountManager;
			accountManager.createAccount(username, password, email, myName, creationResults, creationErrors);
		}
		
		private function creationError(event:Event):void 
		{
			cleanupConnections();
			showErrorText(Localizator.getText("message.account.creation.failed"));
		}
		
		private function onDisconnection(event:DisconnectionEvent):void 
		{
			cleanupConnections();
			showErrorText(Localizator.getText("message.service.unavailable"));
		}
		
		private function creationResults(iq:IQ):void 
		{
			cleanupConnections();
			if(iq.type == IQ.RESULT_TYPE)
			{
				var evt:CreateAccountEvent = new CreateAccountEvent(CreateAccountEvent.ACCOUNT_CREATED);
				evt.username = userNameField.text;
				evt.password = passwordField.text;
				dispatchEvent(evt);
			}
			else {
		    	showErrorText(Localizator.getText("message.account.creation.failed"));
			}
		}
		
		public function showErrorText(text:String):void {
			errorLabel.text = text;
		}
		
		protected function loadServers():void
		{
			var so:SharedObject = SharedObject.getLocal("savedData");
 			servers = so.data.savedAccountCreationServers;
 			if(!servers)
			{
 				servers = []; 
 				so.data.savedAccountCreationServers = servers;
 			}
 			var adminServer:String = SparkManager.getConfigValueForKey("server");
			if(adminServer && adminServer.length > 0 && servers.indexOf(adminServer) == -1)
				servers.unshift(adminServer);
			focusManager.setFocus(userNameField);
		}
		
		private function handleKeyUp(event:KeyboardEvent):void {
			if(event.keyCode == Keyboard.ENTER){
				connect();
			}
		}
		
		public function set titleImage(image:Object):void
		{
			_titleImage = (image != "" ? image : null);
		}		
		
		private function creationErrors(errors:Object)
		{
			cleanupConnections();
			if(errors != null)
				Alert.show(errors.toString());
		}

		[Bindable]
		public function get titleImage():Object 
		{
			return _titleImage;
		}
		
		
		public function set showLogin(setting:Boolean):void
		{
			_showLogin = setting;
		}		

		[Bindable]
		public function get showLogin():Boolean 
		{
			return _showLogin;
		}
		
		public function cancel():void
		{
			cleanupConnections();
			userNameField.text = "";
			passwordField.text = "";
			emailField.text = "";
			confirmPasswordField.text = "";
			var evt:CreateAccountEvent = new CreateAccountEvent(CreateAccountEvent.ACCOUNT_CANCEL);
			dispatchEvent(evt);
		}
		
	]]>
</mx:Script>
<mx:Metadata>
	[Event(name="accountCancel", type="com.inquus.spark.event.CreateAccountEvent")]
	[Event(name="accountCreated", type="com.inquus.spark.event.CreateAccountEvent")]
</mx:Metadata>
    <mx:EmailValidator id="emailValidator"
            source="{emailField}"
            property="text"
      />
    <mx:StringValidator 
        id="nameValidator"
        source="{userNameField}" 
        property="text"
        minLength="1"
    />
    <mx:StringValidator 
        id="passValidator"
        source="{passwordField}" 
        property="text"
        minLength="0"
    /> 
	<mx:HBox styleName="titleBar">
		<mx:Image source="{titleImage}" visible="{titleImage != null}" />
		<mx:Spacer />
		<mx:LinkButton styleName="gotoLogin" id="registerButton" label="{Localizator.getText('message.login.account')}" click="Application.application.showLogin();" visible="{showLogin}" />
	</mx:HBox>
	
	<mx:Grid id="grid" styleName="registerGrid"  >
        
		<mx:GridRow>
			<mx:GridItem styleName="userLabelGrid">
				 <mx:Label color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.username')}" styleName="formLabel" />
			</mx:GridItem>
			<mx:GridItem styleName="emailLabelGrid">
					<mx:Label color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.email')}" styleName="formLabel" />
			</mx:GridItem>
		</mx:GridRow>
		<!--
		<mx:GridRow>
			<mx:GridItem styleName="userName">
				 <mx:Label color="white" id="nameField" filters="{[dropShadow]}" text="Your Name" styleName="formLabel" />
			</mx:GridItem>
		</mx:GridRow>
		-->
		<mx:GridRow>
			<mx:GridItem styleName="userFieldGrid">
		      <mx:TextInput styleName="userTextInput" id="userNameField" />
			</mx:GridItem>
			<mx:GridItem styleName="passwordTextGrid">
				<mx:TextInput styleName="emailTextGrid" id="emailField" />
			</mx:GridItem>
		</mx:GridRow>
		
		<mx:GridRow>
			<mx:GridItem  styleName="userLabelGrid">
				<mx:Label id="passwordLabel" color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.password')}" styleName="formLabel" />
			</mx:GridItem>
			<mx:GridItem styleName="passwordLabelGrid">
				<mx:Label color="white" filters="{[dropShadow]}" text="{Localizator.getText('label.confirm')}" styleName="formLabel" />
			</mx:GridItem>
		</mx:GridRow>
		
		<mx:GridRow>
			<mx:GridItem styleName="userFieldGrid">
				<mx:TextInput styleName="passwordInput" id="passwordField" displayAsPassword="true" />
			</mx:GridItem>
			
			<mx:GridItem styleName="passwordTextGrid">
				<mx:TextInput styleName="passwordInput" id="confirmPasswordField" displayAsPassword="true" keyUp="handleKeyUp(event)" />
			</mx:GridItem>
		</mx:GridRow>
		
		<mx:GridRow styleName="paddedGridRow">
			<mx:GridItem colSpan="2">
				<mx:Label styleName="errorLabel" filters="{[dropShadow]}" id="errorLabel" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow styleName="paddedGridRow">
		  <mx:GridItem />
			<mx:GridItem styleName="loginItem" id="loginItem">
				<mx:Button styleName="createButton" id="cancelButton" filters="{[dropShadow]}" label="{Localizator.getText('label.cancel')}" click="cancel();"/>
				
				<mx:Button styleName="createButton" id="createAccountButton" filters="{[dropShadow]}" label="{Localizator.getText('label.create')}" click="connect();" />
			</mx:GridItem>
		</mx:GridRow>
        	
	</mx:Grid>
</comp:ColorShiftingPanel>
