<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<sparkComp:BuddyRenderer
	xmlns:sparkComp="com.jivesoftware.spark.*"  
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off" 
	verticalScrollPolicy="off" 
	width="100%">
	
	<mx:Script>
		<![CDATA[
			import org.jivesoftware.xiff.data.im.RosterItemVO;
			import mx.controls.ToolTip;
			import mx.core.IToolTip;
			import org.jivesoftware.xiff.conference.RoomOccupant
			import org.jivesoftware.xiff.core.JID;
			import com.jivesoftware.spark.managers.MUCManager;
			import org.jivesoftware.xiff.conference.Room;
			import com.jivesoftware.spark.managers.Localizator;
		
			private var room:Room;
			private var _occupant:RoomOccupant;
			private var _rosterItem:RosterItemVO;
			
			public override function set rosterItem(ri:RosterItemVO):void
			{
				_rosterItem = ri;
			}
			
			[Bindable(event=dataChanged)]
			public override function get rosterItem():RosterItemVO
			{
				return _rosterItem;
			}
			
			[Bindable(event=dataChanged)]
			public function get occupant():RoomOccupant
			{
				return data as RoomOccupant;
			}
			
			public function set occupant(occ:RoomOccupant):void
			{
				_occupant = occ;
			}
			
			public override function singleClicked(event:MouseEvent):void
			{
				
			}
			
			public override function doubleClicked(event:Event):void
			{
				if(rosterItem)
					super.doubleClicked(event);
			}
			
			public override function set data(value:Object):void
			{
				if(value && contact != value)
				{
					super.data = value;
					rosterItem = occupant.rosterItem;
					
					if(rosterItem)
						loadVCard(rosterItem);
					
					dispatchEvent(new Event("dataChanged"));
				}
			}
			
			public override function createProfileToolTip():IToolTip
			{
				var tip:ToolTip = new ToolTip();
				tip.text = occupant.displayName;
				return tip;	
			}
			
			protected override function getMenu():ContextMenu
			{
				var occupantMenu:ContextMenu = new ContextMenu();
				if(rosterItem)
				{
					// Note: We may want to extract out the 'start a chat' code from within doubleClicked() as it is not so intuitive as a callback here
					var startChatMenuItem:ContextMenuItem = new ContextMenuItem(Localizator.getText('menu.contact.start.chat'));
					startChatMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, doubleClicked);
					occupantMenu.customItems.push(startChatMenuItem);
						
					var viewProfileMenuItem:ContextMenuItem = new ContextMenuItem(Localizator.getText('menu.contact.view.profile'));
					viewProfileMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, viewProfile);
					occupantMenu.customItems.push(viewProfileMenuItem);
				}
				
				room = occupant.room;
				
				if (room.role == Room.MODERATOR_ROLE) {
					var kickMenuItem:ContextMenuItem = new ContextMenuItem(Localizator.getText('menu.groupchat.kick.user'));
					kickMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, kickUser);
					occupantMenu.customItems.push(kickMenuItem);
				}
				
				if (room.affiliation == Room.ADMIN_AFFILIATION || room.affiliation == Room.OWNER_AFFILIATION) {		
					var banMenuItem:ContextMenuItem = new ContextMenuItem(Localizator.getText('menu.groupchat.ban.user'));
					banMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, banUser);
					occupantMenu.customItems.push(banMenuItem);
				}
				
				occupantMenu.hideBuiltInItems();
				
				return occupantMenu;
			}
			
			public function kickUser(event:ContextMenuEvent):void {
				// TODO: Include reason for kick and also report errors when the kick fails (by listenening to RoomEvent.ADMIN_ERROR)
				room.kickOccupant(occupant.displayName, '');
			}
			
			public function banUser(event:ContextMenuEvent):void 
			{
				if(!contact)
					return;
				// TODO: Include reason for ban and also report errors when the ban fails (by listenening to RoomEvent.ADMIN_ERROR)

				room.ban([contact.jid]);
			}
			
		]]>
	</mx:Script>
	
</sparkComp:BuddyRenderer>
