<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<sparkComp:ColorShiftingPanel
	headerHeight="0"
	filters="{[new DropShadowFilter(0, 45, 0.0, 0.75, 6.0)]}" height="100%" width="80%" visible="false" 
	backgroundAlpha=".4"
	resize="chatFrame.validateDisplayList();"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:gui="com.jivesoftware.spark.*" 
	xmlns:sparkComp="com.jivesoftware.spark.*"
	xmlns:flexlib = "flexlib.containers.*"
	xmlns:fc="com.jivesoftware.spark.components.resize.*"
	paddingLeft="5" paddingRight="5"
	paddingBottom="5" paddingTop="5" creationComplete="init()">	
	
	<mx:Style>
		.container {
			verticalGap: 0;
		}
		
		.searching { 
        	color: black;
        	font-size: 11;
        	font-weight:normal;
        }
        
        .defaultStyle {
        	color: #7C7C7C;
        	font-size: 11;
        	font-weight:bold;
        }
        
	</mx:Style>

	<mx:Script>
		<![CDATA[
			import com.jivesoftware.spark.chats.*;
			import com.jivesoftware.spark.managers.*;
			import com.jivesoftware.spark.*;
			import com.jivesoftware.spark.utils.*;
			import com.jivesoftware.spark.events.*;
			
			import mx.events.IndexChangedEvent;
			import com.jivesoftware.spark.chats.SparkChat;
			import com.jivesoftware.spark.chats.SparkMessage;
			import mx.events.ItemClickEvent;
			import org.jivesoftware.xiff.data.muc.MUC;
			import org.jivesoftware.xiff.events.RosterEvent;
			import org.jivesoftware.xiff.data.IExtension;
			import org.jivesoftware.xiff.conference.Room;
			import mx.events.ChildExistenceChangedEvent;
			import flexlib.controls.SuperTabBar;
			import flexlib.containers.SuperTabNavigator;
			import mx.controls.TabBar;
			import mx.events.CollectionEvent;
			
			import org.jivesoftware.xiff.data.im.RosterItemVO;
			import org.jivesoftware.xiff.im.Roster;
			import com.jivesoftware.spark.ChatRoom;
			import flexlib.containers.SuperTabNavigator;
			import org.jivesoftware.xiff.data.Presence;
			import org.jivesoftware.xiff.core.XMPPConnection;
			import org.jivesoftware.xiff.data.Message;
			import flash.events.Event;
			import org.jivesoftware.xiff.events.PresenceEvent;
			import flash.profiler.showRedrawRegions;
			import org.jivesoftware.xiff.events.MessageEvent;
			import flash.geom.Point;
    		
			public var inFocus:Boolean = true;
			private var _activeRoom:ChatRoom = null;
			
			public function get activeRoom():ChatRoom
			{
				return _activeRoom;
			}
			
			public function set activeRoom(r:ChatRoom):void
			{
				if(activeRoom && r.parent == chatFrame)
					activeRoom.active = false;
					
				_activeRoom = r;
				if(activeRoom != chatFrame.selectedChild)
					chatFrame.selectedChild = activeRoom; //note: this will cause activeRoom to be set again, calling this reentrantly
				
				if(activeRoom)			
					activeRoom.active = true;
			}
		
			public function createChatUI(evt:ChatEvent):void
			{
				var activate:Boolean = evt.activate;
				var chat:SparkChat = evt.chat;
				var child:ChatRoom = chat ? chat.ui as ChatRoom : null;
				
				//if we don't have an existing chat for this JID, we'll need to create one
				if(!child)
				{
					child = new ChatRoom();
					chat.ui = child;
					child.id = chat.jid.bareJID;
					child.chat = chat;
					child.label = chat.displayName;
					child.setStyle('paddingLeft', 5);
					child.setStyle('paddingBottom', 5);
					child.setStyle('paddingRight', 5);
					child.setStyle('paddingTop', 5);
					chatFrame.addChild(child);
					
				}
				
				setVisible(true);
				
				chatFrame.validateDisplayList();
			    if(inFocus && (activate || chatFrame.getChildren().length == 1))
			    	activeRoom = child;
			}
			
			public function init():void 
			{
				chatFrame.addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, function(evt:ChildExistenceChangedEvent):void {
					callLater(ChatManager.sharedInstance.closeChat, [(evt.relatedObject as ChatRoom).chat]); //move to ChatRoom?
				});
				addEventListener(Event.CLOSE, closeAll);
				
				chatFrame.closePolicy = "close_always";
				
				SparkManager.connectionManager.connection.addEventListener("message", handleMessages);
				ChatManager.sharedInstance.addEventListener(ChatEvent.CHAT_STARTED, createChatUI);
				ChatManager.sharedInstance.addEventListener(ChatEvent.CHAT_ENDED, handleChatClosed);
				ChatManager.sharedInstance.addEventListener(ChatEvent.CHAT_ERROR, handleChatError);
			}
			
			protected function handleChatError(evt:ChatEvent):void
			{
				switch(evt.error)
				{
					case ChatEvent.PASSWORD_ERROR:
						MUCPasswordRequiredWindow.show((evt.chat as SparkGroupChat).room);
						break;
					case ChatEvent.REGISTRATION_REQUIRED_ERROR:
					  	SparkManager.displayError(Localizator.getText('muc.error'), Localizator.getText('muc.error.auth'));
						break;
					case ChatEvent.BANNED_ERROR:
					  	SparkManager.displayError(Localizator.getText('muc.error'), Localizator.getText('muc.error.forbidden'));
						break;
					case ChatEvent.NICK_CONFLICT_ERROR:
					  	SparkManager.displayError(Localizator.getText('muc.error'), Localizator.getText('muc.error.conflict'));
						break;
					case ChatEvent.MAX_USERS_ERROR:
						SparkManager.displayError(Localizator.getText('muc.error'), Localizator.getText('muc.error.service.unavailable'));
						break;
					case ChatEvent.ROOM_LOCKED_ERROR:
						SparkManager.displayError(Localizator.getText('muc.error'), Localizator.getText('muc.error.item.not.found'));
						break;
				}
			}
			
			public function handleChatClosed(evt:ChatEvent):void
			{
				var ui:ChatRoom = evt.chat.ui as ChatRoom;
				if(ui && ui.parent)
					ui.parent.removeChild(ui);
				if(chatFrame.getChildren().length == 0)
					setVisible(false);
			}
			
			private function closeAll(event:Event):void 
			{
				while(chatFrame.getChildren().length > 0)
					(chatFrame.getChildAt(0) as ChatRoom).chat.close();
			}
			
			public function handleMessages(event:MessageEvent):void 
			{
				var message:Message = event.data;
				var chat:SparkChat = ChatManager.sharedInstance.getChat(message.from.unescaped);

				//if we don't have an existing chat, and there's content to the message (i.e. ignoring stuff like composing messages), then we need to create a chat to display the message in
				if(!chat && message.body)
					chat = message.type == Message.GROUPCHAT_TYPE ? ChatManager.sharedInstance.joinGroupChat(message.from.unescaped, false) : ChatManager.sharedInstance.startChat(message.from.unescaped, false);
				
				//the if is needed for the case in which chat and xiffMessage.body were both null above
				if(chat && chat.handleMessage(message) && !inFocus)
				{
					var evt:NotifyEvent = new NotifyEvent(NotifyEvent.NEW_MESSAGE);
					evt.message = message;
					dispatchEvent(evt);
				}

			}
		]]>
	</mx:Script>
		<mx:Canvas height="50" width="100%" id="roomHeader" borderThickness="1" borderStyle="solid" backgroundColor="white" backgroundAlpha=".6" borderColor="black" cornerRadius="6">
		<mx:Text text="Header"/>
		</mx:Canvas>
   		 <flexlib:SuperTabNavigator
   		 	 id="chatFrame"
   		 	 width="100%"
   		 	 height="100%"
   		 	 styleName="roomTabs"
   		 	 paddingTop="0"
   		 	 top="43"
		     popUpButtonPolicy="auto"
     		 scrollSpeed="100"
     		 dragEnabled="true"
     		 dropEnabled="true"
     		 minTabWidth="70"
     		 tabWidth="150"
     		 horizontalGap ="1"
     		 tabHeight="20"
     		 change="activeRoom = event.relatedObject as ChatRoom"
     	/>
 </sparkComp:ColorShiftingPanel>