<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<sparkComp:GradientCanvas

	backgroundAlpha="1"
	filters="{[new DropShadowFilter(0, 45, 0.0, 0.75, 6.0)]}" 
	resize="chatFrame.validateDisplayList();"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:gui="com.jivesoftware.spark.*" 
	xmlns:sparkComp="com.jivesoftware.spark.*"
	xmlns:flexlib = "flexlib.containers.*"
	xmlns:inquus = "com.inquus.spark.*"
	xmlns:fc="com.jivesoftware.spark.components.resize.*"
	showEffect="fade" 
	dropShadowEnabled="true"
	styleName="room"
	creationComplete="init()">	
	
	<mx:Style>
		.container {
			verticalGap: 0;
		}
		
		.searching { 
        	color: black;
        	font-size: 11;
        	font-weight:normal;
        }
        
        .defaultStyle {
        	color: #7C7C7C;
        	font-size: 11;
        	font-weight:bold;
        }
        
	</mx:Style>

	<mx:Script>
		<![CDATA[
			import org.jivesoftware.xiff.core.UnescapedJID;
			import mx.events.FlexEvent;
			import com.jivesoftware.spark.chats.*;
			import com.jivesoftware.spark.managers.*;
			import com.jivesoftware.spark.*;
			import com.jivesoftware.spark.utils.*;
			import com.jivesoftware.spark.events.*;
			
			import mx.events.IndexChangedEvent;
			import com.jivesoftware.spark.chats.SparkChat;
			import com.jivesoftware.spark.chats.SparkMessage;
			import mx.events.ItemClickEvent;
			import org.jivesoftware.xiff.data.muc.MUC;
			import org.jivesoftware.xiff.events.RosterEvent;
			import org.jivesoftware.xiff.data.IExtension;
			import org.jivesoftware.xiff.conference.Room;
			import mx.events.ChildExistenceChangedEvent;
			import flexlib.controls.SuperTabBar;
			import flexlib.containers.SuperTabNavigator;
			import mx.controls.TabBar;
			import mx.events.CollectionEvent;
			
			import org.jivesoftware.xiff.data.im.RosterItemVO;
			import org.jivesoftware.xiff.im.Roster;
			import com.jivesoftware.spark.ChatRoom;
			import flexlib.containers.SuperTabNavigator;
			import org.jivesoftware.xiff.data.Presence;
			import org.jivesoftware.xiff.core.XMPPConnection;
			import org.jivesoftware.xiff.data.Message;
			import flash.events.Event;
			import org.jivesoftware.xiff.events.PresenceEvent;
			import flash.profiler.showRedrawRegions;
			import org.jivesoftware.xiff.events.MessageEvent;
			import flash.geom.Point;
    		
			public var inFocus:Boolean = true;
			private var _activeRoom:ChatRoom = null;
			private var _mainRoom:ChatRoom = null;
			private var _roomHeader:DisplayObject;

			
			public function get activeRoom():ChatRoom
			{
				return _activeRoom;
			}
			
			public function get mainRoom():ChatRoom
			{
				return _mainRoom;
			}
			
			public function set roomHeader(header:DisplayObject):void
			{
				_roomHeader = header;
			}
			
			public function get roomHeader():DisplayObject
			{
				return _roomHeader;
			}
			
			public function set mainRoom(room:ChatRoom):void
			{
				_mainRoom = room;
				//SparkManager.chatMediator.
			}

			public function set activeRoom(r:ChatRoom):void
			{
				if(activeRoom && r.parent == chatFrame)
					activeRoom.active = false;
					
				_activeRoom = r;
				if(activeRoom != chatFrame.selectedChild)
					chatFrame.selectedChild = activeRoom; //note: this will cause activeRoom to be set again, calling this reentrantly
				
				if(activeRoom)			
					activeRoom.active = true;
			}
			
			//returns true if the room was added, false if it already existed
			public function addChatUI(room:ChatRoom, activate:Boolean):Boolean
			{
				var added:Boolean = false;
				if(chatFrame.getChildren().length == 0)
				{
			   		mainRoom = room;
			 	}
			 	
				if(!chatFrame.contains(room))
				{
				
					chatFrame.addChild(room);
					added = true;
					
				}
				//setVisible(true);
				
				chatFrame.validateDisplayList();
			    if(activate || chatFrame.getChildren().length == 1)
			    	activeRoom = room;

			    return added;
			}
		

			
			public function init():void 
			{
				chatFrame.addEventListener(ChildExistenceChangedEvent.CHILD_REMOVE, function(evt:ChildExistenceChangedEvent):void {
					dispatchEvent(evt);
					callLater(ChatManager.sharedInstance.closeChat, [(evt.relatedObject as ChatRoom).chat]); //move to ChatRoom?
				});
				addEventListener(Event.CLOSE, closeAll);
				
				chatFrame.closePolicy = "close_always";
				
				addChatUI(mainRoom,true);
				addChildAt(_roomHeader,0);				
				
				//dispatchEvent(new Event("created"));
				
			}
			

			
			public function handleChatClosed(evt:ChatEvent):void
			{
				var ui:ChatRoom = evt.chat.ui as ChatRoom;
				if(ui && ui.parent)
					ui.parent.removeChild(ui);
				if(chatFrame.getChildren().length == 0){
					//setVisible(false);
				}
			}
			
			private function closeAll(event:Event):void 
			{
				while(chatFrame.getChildren().length > 0)
					(chatFrame.getChildAt(0) as ChatRoom).chat.close();
			}
			

		]]>
	</mx:Script>
	
		<mx:Fade id="fade" duration="600"/>
		
   		 <flexlib:SuperTabNavigator
   		 	 id="chatFrame"
   		 	 width="100%"
   		 	 height="100%"
   		 	 styleName="roomTabs"
   		 	 backgroundAlpha="0"
   		 	 borderStyle="solid"
   		 	 top="48"
		     popUpButtonPolicy="auto"
		     paddingLeft="5"
		     paddingRight="5"
		     paddingTop="3"
     		 scrollSpeed="100"
     		 dragEnabled="true"
     		 dropEnabled="true"
     		 minTabWidth="70"
     		 tabWidth="150"
     		 horizontalGap ="1"
     		 tabHeight="20"
     		 visible="true"
     		 borderSides="top"
     		
     		 change="activeRoom = event.relatedObject as ChatRoom"
     	/>
 </sparkComp:GradientCanvas>