<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:VDividedBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	     xmlns:local="*"
	     xmlns:jive="com.jivesoftware.spark.ui.*"
	     xmlns:spark="com.jivesoftware.spark.*"
	     width="100%"
	     height="100%"
	     verticalScrollPolicy="off"
	     horizontalScrollPolicy="off"
	     backgroundColor="#DDDDDD">
	     
	<mx:Script>
		<![CDATA[
			import org.jivesoftware.xiff.conference.Room;
			import org.jivesoftware.xiff.data.im.RosterItemVO;
			import com.jivesoftware.spark.SparkChat;
			import com.jivesoftware.spark.events.EditorEvent;
			import com.jivesoftware.spark.ui.Message;
			import org.jivesoftware.xiff.data.Presence;
			import com.jivesoftware.spark.managers.SparkManager;
			private var _active:Boolean = false;
			private var _isTyping:Boolean = false;
			private var _unreadMessages:int = 0;
			private var _chat:SparkChat;
			
			private var completionPrefix:String = null;
			private var lastCompletedString:String = null;
			private var secondPass:Boolean = false;
			
			[Embed(source="/assets/images/message_information.png")]
			private static const sparkIcon:Class;
			
			[Embed(source="/assets/images/message_edit.png")]
			private static const editIcon:Class;
			
			[Embed(source="/assets/images/conference_16x16.png")]
			private static const conferenceIcon:Class;
			
			//TODO: fix this up. It works, but there's a lot that could be better
			public function completeWord(event:EditorEvent):void
			{
				var runningSecondPass:Boolean = secondPass;
				if(completionPrefix === null)
				{
					completionPrefix = event.message;
					completionPrefix = completionPrefix.substring(completionPrefix.lastIndexOf(" ") + 1);
				}
				var completion:String = history.getMostRecentlyActiveUserName(completionPrefix, lastCompletedString);
				if(!completion)
					resetCompletion(false);
				if(completion)
				{
					editor.text = editor.text.substr(0, editor.text.length - (lastCompletedString !== null ? lastCompletedString.length : completionPrefix.length)) + completion;
					lastCompletedString = completion;
					editor.textArea.selectionBeginIndex = editor.textArea.selectionEndIndex = editor.textArea.length;
				}
			}
			
			private function resetCompletion(resetPrefix:Boolean = true):void
			{
				if(resetPrefix)
					completionPrefix = null;
				lastCompletedString = null;
				secondPass = false;
			}
			
			//TODO: reference loop
			public function set chat(c:SparkChat):void
			{
				_chat = c;
			}
			
			//todo: figure out how to make this statically typed without breaking bindings
			[Bindable]
			public function get chat():*
			{
				return _chat;
			}
			
			public function get active():Boolean
			{
				return _active;
			}
			
			public function set active(flag:Boolean):void
			{
				if(_active == flag)
					return;
				_active = flag;
			  
			    if(active) 
				{	
					clearMessageCount();
					updateIcon();
					label = chat.displayName;
					editor.focus();
				}
			}
			
			public function increaseMessageCount():void 
			{
				if(active)
					return;
					
				_unreadMessages++;
				updateIcon();
				label = chat.displayName + " (" + unreadMessageCount + ")";
			}
			
			public function clearMessageCount():void {
				_unreadMessages = 0;
			}
			
			public function get unreadMessageCount():int {
				return _unreadMessages;
			}
			
			public function updateIcon():void
			{
				if(_isTyping)
					icon = editIcon;
				else if(unreadMessageCount > 0)
			    	icon = sparkIcon;
				else
					icon = chat is SparkGroupChat ? conferenceIcon : SparkManager.presenceManager.getIconFromPresence(chat ? chat.presence : Presence.UNAVAILABLE_TYPE);
			}
			
			public function set isTyping(flag:Boolean):void
			{
				_isTyping = flag;
				updateIcon();
			}
		]]>
	</mx:Script>
	  
    <!-- Add Top UI -->
   <mx:HDividedBox id="contentDivider" verticalScrollPolicy="off" horizontalScrollPolicy="off" x="0" y="0" height="82%" width="100%" horizontalGap="{chat is SparkGroupChat ? 10 : 0}">
   
		<mx:VBox verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="100%">
			<mx:TextArea borderSides="right" borderStyle="solid" text="{'Topic: ' + (chat is SparkGroupChat &amp;&amp; chat.room.subject ? chat.room.subject : '')}" height="{chat is SparkGroupChat ? 20 : 0}" paddingLeft="5" backgroundColor="#DDDDDD" width="100%" paddingTop="3" fontWeight="bold" color="black" fontFamily="Lucida Sans, Myriad Pro, Arial, sans serif" fontSize="12"/>
			<jive:MessageHistory id="history" borderStyle="solid" creationComplete="ScrollWheelManager.registerForScrollEvents(history.history)" height="100%"  width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="auto" />
		</mx:VBox>
		
		<mx:Canvas horizontalScrollPolicy="off" verticalScrollPolicy="off" id="mucControls" height="100%" maxHeight="{contentDivider.height}" borderSides="right left bottom" borderStyle="solid" width="{chat is SparkGroupChat ? 225 : 0}">
			<spark:ListGroup alternatingItemColors="{[0xDDDDDD, 0xEEEEEE]}"  collapsable="false" maxHeight="{mucControls.height}" verticalScrollPolicy="auto" groupName="Participants" id="occupantList" itemRenderer="com.jivesoftware.spark.MUCOccupantRenderer" dataProvider="{chat.room ? chat.room : null}"/>
			<spark:MUCInvitePane visible="false" id="invitePane" creationComplete="{invitePane.addEventListener('close', function(evt:*):void {invitePane.visible = false; occupantList.visible = true; inviteButton.visible = true;});}" width="{mucControls.width}" room="{chat.room}"/>
			<mx:LinkButton id="inviteButton" click="{occupantList.visible = false; inviteButton.visible = false; invitePane.visible = true; invitePane.rebuildCompletionList();}" label="Invite" color="#555555" textDecoration="underline" right="0" top="0"/>
		</mx:Canvas>
		
	
	</mx:HDividedBox>

	<jive:Editor resetCompletion="resetCompletion()" completeWord="completeWord(event)" borderStyle="none" id="editor" bottom="0" height="18%" width="100%" />	
	
</mx:VDividedBox>