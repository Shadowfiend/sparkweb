<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:Canvas
		xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:sparkComp="com.jivesoftware.spark.*"
		filters="{[]}" 
		verticalScrollPolicy="off" 
	    horizontalScrollPolicy="off"
		width="100%" 
		toolTip="{data.jid}" toolTipCreate="event.toolTip = createProfileToolTip()"
	    height="28"
	    borderSides="top bottom"
	    color="black"
	    effectEnd="finishResize(event)"
	    resizeEffect="{resizer}"
	    cornerRadius="{expanded ? 8 : 0}"
	    backgroundColor="{expanded ? 0xCFCFCF : 0xEEEEEE}"
	    fontFamily="Lucida Sans, Myriad Pro, Arial, sans serif"
	    fontStyle="{rosterItem &amp;&amp; rosterItem.show != null &amp;&amp; rosterItem.show != Presence.SHOW_CHAT ? 'italic' : 'normal'}" 
	    fontWeight="{selected ? 'bold' : 'normal'}"
		implements="mx.managers.IFocusManagerComponent"
	    creationComplete="callLater(initRenderer)">
 
<mx:Script>
	<![CDATA[
		import mx.events.ListEvent;
		import mx.events.FlexEvent;
		import mx.controls.listClasses.ListBase;
		import mx.effects.IEffectInstance;
		import mx.effects.Effect;
		import mx.events.EffectEvent;
		import mx.events.ResizeEvent;
		import mx.effects.Resize;
		import com.jivesoftware.spark.managers.ChatManager;
		import org.jivesoftware.xiff.conference.RoomOccupant;
		import org.jivesoftware.xiff.data.im.Contact;
		import org.jivesoftware.xiff.events.VCardEvent;
		import org.jivesoftware.xiff.core.JID;
		import com.jivesoftware.spark.managers.Localizator;
		import com.jivesoftware.spark.ProfileWindow;
		import com.jivesoftware.spark.GroupChangeWindow;
		import com.jivesoftware.spark.BuddyToolTip;
		import mx.core.IToolTip;
		import mx.core.UIComponent;
		import org.jivesoftware.xiff.events.RosterEvent;
		import mx.binding.utils.BindingUtils;
		import org.jivesoftware.xiff.data.im.RosterItemVO;
		import mx.graphics.BitmapFill;
		import org.jivesoftware.xiff.data.Presence;
		import org.jivesoftware.xiff.vcard.VCard;
		import flash.events.MouseEvent;
		import mx.collections.ArrayCollection;
		import mx.controls.*;
		import com.jivesoftware.spark.managers.SparkManager;
		import com.jivesoftware.spark.managers.PresenceManager;
		import org.jivesoftware.xiff.data.im.RosterExtension;
		
		protected var _selected:Boolean = false;
		protected var _changingName:Boolean = false;
		protected var clickTimer:Timer;
		protected var _open:Boolean = false;
		protected var actionsPane:* = null;
		[Bindable]
		protected var expanded:Boolean = false;
		
		[Embed(source="/assets/images/dummyContact.png")]
		protected static const dummyIcon:Class;
		
		protected static const resizer:Resize = new Resize();
		
		protected static const shadowFilter:DropShadowFilter = new DropShadowFilter(1, 90, 0, 0.7, 6, 6);
		
		protected var outerList:ListBase = null;
		protected var listGroup:ListGroup = null;
		
		protected function initRenderer():void
		{
			outerList = owner as ListBase;
			if(parentDocument is ListGroup)
				listGroup = parentDocument as ListGroup;

        	outerList.addEventListener(ListEvent.CHANGE, updateSelected);
          
          	addEventListener(FlexEvent.DATA_CHANGE, checkSelected);
		}
		
		private function checkSelected(event:FlexEvent):void
		{
			selected = outerList.selectedItem == this.data;
		}
  
		private function updateSelected(event:ListEvent):void
		{
			selected = event.itemRenderer == this;
		}
		
		[Bindable]
		[Bindable(event=dataChanged)]
		public function get rosterItem():RosterItemVO
		{
			if(data is RosterItemVO)
				return data as RosterItemVO;
			else if(data.rosterItem)
				return data.rosterItem as RosterItemVO;
			else
				return null;
		}
		
		public function set rosterItem(ri:RosterItemVO):void
		{
			data = ri;
		}
		
		public function singleClicked(event:MouseEvent):void 
		{
			clickTimer = new Timer(350, 1);
			clickTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function(evt:TimerEvent):void {
				if(expanded)
					close();
				else
					expand();
			});
			clickTimer.start();
		}
		
		protected function cancelClickTimer(evt:FocusEvent=null):void 
		{
			if(clickTimer)
			{
				clickTimer.stop();
				clickTimer = null;
			}
		}
		
		public function doubleClicked(event:Event):void 
		{
			cancelClickTimer();
			ChatManager.sharedInstance.startChat(jid, true);
			event.stopImmediatePropagation();
		}
		
		public function loadVCard(rosterItem:RosterItemVO):void 
		{
			var card:VCard = VCard.getVCard(SparkManager.connectionManager.connection, rosterItem)
			if(card.avatar)
			{
				avatar = card.avatar;
			}
			else
			{
				avatar = null;
				card.addEventListener(VCardEvent.AVATAR_LOADED, handleAvatarLoaded);
			}
		}
		
		protected function handleAvatarLoaded(evt:VCardEvent):void
		{
			var card:VCard = evt.vcard;
			card.removeEventListener(VCardEvent.AVATAR_LOADED, handleAvatarLoaded);
			avatar = card.avatar;
		}
		
		public override function set data(value:Object):void
		{
			if(value && value is Contact && contact != value)
			{
				if(listGroup && listGroup.expandedPaneContact == value && !expanded)
					expand()
				else if(getChildAt(0) is BuddyActionsRenderer || getChildAt(0) is RoomOccupantActionsRenderer)
					close();
				super.data = value;
				
				addListeners();
					
				if(rosterItem && rosterItem.online)
					loadVCard(contact as RosterItemVO);
				dispatchEvent(new Event("dataChanged"));
			}
		}
		
		protected var isSetup:Boolean = false;
		protected function addListeners():void
		{
			if(isSetup)
				return;
			
			isSetup = true;
			doubleClickEnabled = true;
			addEventListener(MouseEvent.DOUBLE_CLICK, doubleClicked);
			addEventListener(MouseEvent.CLICK, singleClicked);
			addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, cancelClickTimer);
			addEventListener(FocusEvent.KEY_FOCUS_CHANGE, cancelClickTimer);
		}
		
		/**** Setters ****/

		public function set selected(selected:Boolean):void 
		{
			if(selected == _selected)
				return;
			_selected = selected;
		}
		
		public function set nick(n:String):void 
		{
			if(!rosterItem)
				return;
			
			// Update the contact in the roster only if the nick was actually changed.
			if(n != rosterItem.displayName)
				SparkManager.roster.updateContactName(rosterItem, n);
		}
		
		protected var avatarLoader:Loader;
		public function set avatar(img:*):void 
		{
			if(img)
				avatarImage.source = img is ByteArray ? img as ByteArray : img.loaderInfo.bytes
			else
				avatarImage.source = dummyIcon;
		}
		
		public function set changingName(flag:Boolean):void { _changingName = flag; }
		
		/**** Getters ****/
		
		public function get jid():JID { return rosterItem ? rosterItem.jid : null; }
		
		[Bindable]
		public function get changingName():Boolean { return _changingName; }
		
		[Bindable]
		public function get selected():Boolean { return _selected; }
		
		
		public function set contact(c:Contact):void {
			data = c;
		}
		
		[Bindable]
		[Bindable(event=dataUpdated)]
		public function get contact():Contact { return data as Contact; }
		
		public function formatStatus(status:String):String 
		{
			if(!status)
				return "";
			switch(status.toLowerCase())
			{
				case "available":
				case "online":
				case "offline":
					return "";
				default:
					return "<font size='12'>" + status + "</font>";
			}
		}
		
		public function formatLabel(name:String, status:String):String
		{
			status = formatStatus(status);
			if(status && status.length > 0)
				return name + " - " + status;

			return name;
		}
		
		public function createProfileToolTip():IToolTip
		{
			var tt:BuddyToolTip = new BuddyToolTip();
			tt.text = jid.toString();
			return tt;
		}
		
/*		public override function set selected(flag:Boolean):void
		{
			super.selected = flag;
			if(!flag)
				close();
		}*/
		
		public function expand():void {
			if(contact is RoomOccupant)
				actionsPane = new RoomOccupantActionsRenderer();
			else if(contact is RosterItemVO)
				actionsPane = new BuddyActionsRenderer();
			else
				throw new Error("Unknown contact type");
				
			filters = [shadowFilter];
				
			parent.setChildIndex(this, this.parent.numChildren - 1);

			actionsPane.contact = contact;
			height += actionsPane.height;
			actionsPane.setStyle("bottom", Number(0));
			this.addChildAt(actionsPane, 0);
			expanded = true;
			if(listGroup)
				listGroup.expandedPaneContact = contact;
		}
		
		public function close():void {
			if(listGroup && listGroup.expandedPaneContact == contact)
				listGroup.expandedPaneContact = null;
			height -= actionsPane.height;
		}
		
		protected function finishResize(event:EffectEvent):void
		{
			if(event.effectInstance.effect != resizer)
				return; 
			if(height == 28)
			{
				filters = [];
				removeChildAt(0);
				expanded = false;
			}
		}
		
		/*
		This is an eeeeeeevil hack to avoid having mx:List collapse this back down to 28px high when it re-lays-out
		*/
		public override function setActualSize(newWidth:Number, newHeight:Number):void
		{
			if(expanded && newHeight == 28)
				newHeight = height;
			else
				super.setActualSize(newWidth, newHeight);
		}

	]]>
</mx:Script>
	<!-- Warning! I know these hardcoded vertical offsets are lame, but don't try to fix it with a nested canvas. It kills roster performance -->
	<mx:Image id="avatarImage" left="8" top="2" width="24" height="24" source="@Embed(source='/assets/images/dummyContact.png')" maxWidth="{rosterItem != null ? NaN : 0}" visible="{rosterItem != null}" />
	<mx:Image id="presenceIconImage" left="40" top="8" source="{SparkManager.presenceManager.getIconFromRosterItem(rosterItem != null ? rosterItem : data, data.show, data.online)}" />
	<mx:TextArea left="64" borderStyle="none" selectable="false" paddingTop="8" focusThickness="0" height="28" focusEnabled="false" backgroundColor="{expanded ? 0xCFCFCF : 0xEEEEEE}" right="0" top="0" toolTipCreate="event.toolTip = createProfileToolTip()" id="statusLabel" fontSize="13" htmlText="{formatLabel(data.displayName, rosterItem != null ? rosterItem.status : 'available')}" />
</mx:Canvas>
