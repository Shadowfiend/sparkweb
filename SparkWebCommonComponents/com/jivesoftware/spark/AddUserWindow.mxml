<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->

   
<comp:ColorShiftingTitleWindow xmlns:comp="com.jivesoftware.spark.*" xmlns:mx="http://www.adobe.com/2006/mxml" color="#111111"
	title="{Localizator.getText('title.add.user.window')}" showCloseButton="true" close="close()" 
	creationComplete="init()">
	<mx:Style>
		.title {
			fontWeight: bold;
			fontSize: 12pt;
		}
	</mx:Style>
    <mx:Script>
        <![CDATA[
        	import com.jivesoftware.spark.events.InviteUserEvent;
        	import com.jivesoftware.spark.events.SparkWindowEvent;
        	import org.jivesoftware.xiff.core.UnescapedJID;
        	import mx.core.Application;
        	import mx.collections.ArrayCollection;
        	import mx.events.CloseEvent;
            import mx.managers.PopUpManager;
            import mx.controls.Text;
        	
        	import org.jivesoftware.xiff.core.XMPPConnection;
        	import org.jivesoftware.xiff.im.Roster;
        	import org.jivesoftware.xiff.data.im.RosterItemVO;
        	import org.jivesoftware.xiff.vcard.VCard;
        	import org.jivesoftware.xiff.events.VCardEvent;
        	import com.jivesoftware.spark.managers.*;
        	import org.jivesoftware.xiff.data.im.RosterGroup;
            
            private const MIN_FIELD_WIDTH:uint = 256;
           
            /**
             * Event handler for the OK button.
             */
            private function createUser():void {
                var nickname:String = nicknameField.text;
                var username:String = usernameField.text;
                
                if(_userType == "email"){
                	var evt:InviteUserEvent = new InviteUserEvent(InviteUserEvent.INVITE,true);
                	evt.email = username;
                	dispatchEvent(evt);
                }else{
	         		var server:String = _userType == "site" ? SparkManager.getConfigValueForKey("server") :  "gmail.com";
	         		
	          		var jidStr:String = _userType == "email" ? username : username + "@" + server;
	        		var enteredJid:UnescapedJID = new UnescapedJID(jidStr);               
	                var con:XMPPConnection = SparkManager.connectionManager.connection;
	                var roster:Roster = new Roster(con);
					roster.addContact(enteredJid, nickname, groupField.text, true);
                }
				close();
            }
            
            private function close():void {
            	var evt:SparkWindowEvent = new SparkWindowEvent(SparkWindowEvent.CLOSE_WINDOW,true);
            	evt.window = this;
            	dispatchEvent(evt);
            }
            
            public function show():void {
            	stage.focus = usernameField;
            }
            
            public function prefill(jid:UnescapedJID=null, nickname:String=null, group:String=null):void {
            	if (jid != null) {
            		usernameField.text = jid.node.toString();
            	}
            	if (nickname != null) {
            		nicknameField.text = nickname;
            	}
            	if (group != null) {
            		groupField.text = group;
            	}
            }
            
            public function init():void {
           		
            }
            
            private function handleUsernameFocusOut():void {
            	// Append "@[servername]" if only a username was entered.
//            	if (usernameField.text.length > 0 && usernameField.text.indexOf("@") < 0) {
//            		var server:String = SparkManager.connectionManager.connection.server;
//            		usernameField.text = usernameField.text + "@" + server;
//            	}
//            	
            	//autoFillNickField();
            	autoFillNickFieldByVcard();
            }
            
            /**
             * Automatically fill-in the nickname field with the node of the JID that was entered.
             */
            private function autoFillNickField():void {
            	if (usernameField.length == 0 || nicknameField.length != 0) 
            		return;
            	
            	try {
            		var server:String = _userType == "site" ? SparkManager.connectionManager.connection.server : "gmail.com";
	          		usernameField.text = usernameField.text + "@" + server;
            		var enteredJid:UnescapedJID = new UnescapedJID(usernameField.text);
            	}
            	catch (exception:String) {
            		return;
            	}
            	
            	setNickAndHighlight(enteredJid.node);
            }
            
            /**
             * Automatically fill-in the nickname field using the user's VCard nickname,
             * if available.
             */
            private function autoFillNickFieldByVcard():void {
            	if (usernameField.length == 0)
            		return;
            	var server:String = _userType == "site" ? SparkManager.getConfigValueForKey("server") : "gmail.com";
          		var jidStr:String = usernameField.text + "@" + server;
            	var con:XMPPConnection = SparkManager.connectionManager.connection;
            	
            	var userBeingAdded:RosterItemVO = RosterItemVO.get(new UnescapedJID(jidStr), true);

            	var vcard:VCard = VCard.getVCard(con, userBeingAdded);
		    	if(vcard.loaded)
		    	{
		    		setNickAndHighlight(vcard.nickname);
		    	}
		    	else
		    	{
		    		vcard.addEventListener(VCardEvent.LOADED, function(event:VCardEvent):void { setNickAndHighlight(vcard.nickname); });
		    	}
            }
            
            /**
             * Sets the nickname field's text and highlights it for easy overwriting.
             */
            private function setNickAndHighlight(nickname:String):void {
            	if (nickname != null)
				{
					nicknameField.text = nickname;
					nicknameField.setSelection(0, nicknameField.text.length);
				}
            }
            
            [Bindable]
            public var types:ArrayCollection = new ArrayCollection(
                [ {label:SparkManager.getConfigValueForKey('siteName'), data:"site"}, 
                  {label:"GMail", data:"gmail"} , {label:"Email", data:"email"}]);
            
            private var _userType:String = "site";
            private function closeHandler(event:Event):void {
                _userType = ComboBox(event.target).selectedItem.data;
                nameItem.label = ComboBox(event.target).selectedItem.label + ( _userType == 'email' ? " Address" : ' username');
            } 
        ]]>
    </mx:Script>

	 <mx:Form id="myForm" defaultButton="{submitButton}">
		<mx:ComboBox close="closeHandler(event)" dataProvider="{types}" >
			
		</mx:ComboBox>
        <mx:FormItem id="nameItem" label="{SparkManager.getConfigValueForKey('siteName')} username">
            <mx:TextInput id="usernameField" focusOut="handleUsernameFocusOut()" minWidth="{MIN_FIELD_WIDTH}" />
        </mx:FormItem>
        <mx:FormItem label="{Localizator.getText('label.nickname')}">
            <mx:TextInput id="nicknameField" minWidth="{MIN_FIELD_WIDTH*0.6}" />
        </mx:FormItem>
        <mx:FormItem label="{Localizator.getText('label.group')}">
            <mx:ComboBox id="groupField" editable="true" dataProvider="{SparkManager.roster.groups}" labelField="label" minWidth="{nicknameField.width}" />
        </mx:FormItem>
        <mx:FormItem>
        	<mx:Spacer height="30" />
        </mx:FormItem>
    </mx:Form>

	<mx:ControlBar horizontalAlign="right">
    	<mx:Button color="#111111" filters="{[new DropShadowFilter(0, 45, 0.0, 1.0, 2.0)]}" label="{Localizator.getText('label.cancel')}" click="close();" />
		<mx:Button id="submitButton" color="#111111" filters="{[new DropShadowFilter(0, 45, 0.0, 1.0, 2.0)]}" label="{Localizator.getText('label.submit')}" click="createUser();"/>
	</mx:ControlBar>   
</comp:ColorShiftingTitleWindow>