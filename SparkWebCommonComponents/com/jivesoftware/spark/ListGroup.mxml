<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" visible="{dataProvider != null &amp;&amp; dataProvider.length > 0}" maxHeight="{visible ? NaN : 0}" xmlns:spark="com.jivesoftware.spark.*" horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" paddingBottom="0" paddingTop="0" borderStyle="none" verticalGap="0">
<mx:Script>
	<![CDATA[
		import mx.events.FlexEvent;
		import org.jivesoftware.xiff.data.im.Contact;
		import mx.collections.ICollectionView;
		import mx.collections.ListCollectionView;
		import mx.collections.SortField;
		import mx.collections.Sort;
		import org.jivesoftware.xiff.data.im.RosterGroup;
		import org.jivesoftware.xiff.data.Presence;
		import mx.collections.ArrayCollection;
		import mx.core.IChildList;
		import com.jivesoftware.spark.managers.PresenceManager;
		import com.jivesoftware.spark.ContactList;
		import com.jivesoftware.spark.ContactListContainer;
		import org.jivesoftware.xiff.data.im.RosterItemVO;
		import com.jivesoftware.spark.managers.SparkManager;
		import mx.effects.Glow;
		import com.jivesoftware.spark.BuddyRenderer;
		
		[Embed(source="/assets/images/blueArrowDown.png")]
		private static const blueArrowDown:Class;
		
		[Embed(source="/assets/images/blueArrowRight.png")]
		private static const blueArrowRight:Class;
		
		[Embed(source="/assets/images/dnd.png")]
		private static const dnd:Class;

		protected var _name:String;
		protected var _collapsed:Boolean = false;
		protected var _collapsable:Boolean = true;
		[Bindable]
		protected var filter:String = "";
		protected var itemColors:Array = undefined;
		
		protected var _dataProvider:ListCollectionView = null;
		
		public function set collapsed(flag:Boolean):void
		{
			_collapsed = flag;
			if(_collapsed == false && itemRepeater.dataProvider == null && dataProvider != null)
			{
				itemRepeater.dataProvider = _dataProvider;
			}
		}
		
		[Bindable]
		public function get collapsed():Boolean
		{
			return _collapsed;
		}
		
		public function get buddyCount():int {
			return dataProvider.length;
		}
		
		public function get buddyRenderers():Array
		{
			var results:Array = [];
			for(var i:uint = 0; i < navBox.numChildren; i++)
			{
				results.push(navBox.getChildAt(i));
			}

			return results;
		}
		
		public function set collapsable(flag:Boolean):void
		{
			_collapsable = flag;
		}
		
		[Bindable]
		public function get collapsable():Boolean
		{
			return _collapsable;
		}
		
		public function set groupName(nameString:String):void 
		{
			_name = nameString;
		}
		
		[Bindable]
		public function get groupName():String
		{
			return _name;
		}
		
		[Bindable]
		[Bindable(event=updateDataProvider)]
		public function get dataProvider():ListCollectionView
		{
		    return itemRepeater.dataProvider ? itemRepeater.dataProvider as ListCollectionView : _dataProvider;
		}
		
		protected function defaultFilter(contact:Contact):Boolean
		{
			return (filter.length == 0 || contact.displayName.toLowerCase().indexOf(filter) == 0) && (contact is RosterItemVO ? (contact as RosterItemVO).online : true);
		}
		
		public function filterBy(newFilter:String):void
		{
			filter = newFilter;
		//	if(itemRepeater.dataProvider)
		    	dataProvider.refresh();
		}
		
		public function set dataProvider(provider:ListCollectionView):void
		{
			if(!provider)
				provider = new ArrayCollection();
			/*else if(provider is Array)
				provider = new ArrayCollection(provider as Array);
			else if(!provider is ListCollectionView)
				provider = new ArrayCollection(); //can't get valid data, set null*/
			
			_dataProvider = new ListCollectionView(provider);
			dataProvider.filterFunction = defaultFilter;
			dataProvider.refresh();
			if(!collapsed && _dataProvider != null)
		    	itemRepeater.dataProvider = _dataProvider;
		    	
		    	
		   // itemRepeater.dataProvider.refresh();
		}
		
		public function set alternatingItemColors(colors:Array):void
		{
			itemColors = colors;
		}
		
		//TODO: needs to be configurable
		[Bindable]
		public function get alternatingItemColors():Array
		{
			return [0xDDDDDD, 0xEEEEEE];
		}
		
		public function colorForRowIndex(colors:Array, index:uint):Number
		{
			return new Number(colors[index % colors.length]);
		}
		
		public function getShouldBeVisible(dp:ListCollectionView, count:int):Boolean
		{
			return dp != null && count > 0;
		}
		
		public static var repeatCount:uint = 0;
	]]>
</mx:Script>

<!-- Collapsible Item -->
<mx:HBox width="100%" id="innerBox" filters="{[]}" backgroundColor="#DDDDDD" cornerRadius="5" verticalAlign="middle" horizontalGap="0" click="collapsed = !collapsed" paddingBottom="0" paddingTop="0">
	<mx:Spacer height="100%" width="5"/>
	<mx:Image id="arrows" source="{collapsable ? (collapsed ? blueArrowRight : blueArrowDown) : null}" />
	<mx:Spacer height="100%" width="5"/>
	<mx:Label id="title" text="{groupName + ' (' + dataProvider.length + ') '}" height="20" paddingTop="3" fontWeight="bold" color="black" fontFamily="Lucida Sans, Myriad Pro, Arial, sans serif" fontSize="12" />
	<mx:Spacer height="100%" width="100%"/>
</mx:HBox>
<mx:VBox
	verticalGap="0"
	visible="{(!collapsed || filter != '') &amp;&amp; visible}"
    maxHeight="{navBox.visible ? NaN : 0}" 
	width="100%" 
	id="navBox" >
	<mx:Repeater recycleChildren="true" id="itemRepeater">
		 	<spark:BuddyRenderer contact="{itemRepeater.currentItem}" />
	</mx:Repeater>
</mx:VBox>
</mx:VBox>

