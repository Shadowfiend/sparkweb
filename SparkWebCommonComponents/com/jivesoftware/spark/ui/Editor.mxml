<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="_init()">
	<mx:Metadata><![CDATA[
		[Event( name="messageCreated", type="com.jivesoftware.spark.events.EditorEvent" )]
		[Event( name="completeWord", type="com.jivesoftware.spark.events.EditorEvent" )]
		[Event( name="resetCompletion", type="com.jivesoftware.spark.events.EditorEvent" )]
	]]></mx:Metadata>
	<mx:Script>
	<![CDATA[
		import com.jivesoftware.spark.events.EditorEvent;
		import mx.managers.FocusManager;
		import mx.utils.StringUtil;
	
		private function _init():void {
			textArea.addEventListener(KeyboardEvent.KEY_DOWN, _handleKeyDown, true);
			textArea.addEventListener(KeyboardEvent.KEY_UP, _handleKeyUp, true);
		}
		
		private function _handleKeyDown(event:KeyboardEvent):void {
			switch(event.charCode)
			{
				case 13:
					if(!event.altKey) {
						event.stopPropagation();
						_fireMessageCreated();
					}
					break;
				case 9:
					break;
				default:
					var cancelEvt:EditorEvent = new EditorEvent(EditorEvent.RESET_COMPLETION, true);
					cancelEvt.message = StringUtil.trim(textArea.text);
					dispatchEvent(cancelEvt);
					break;
			}
		}
		
		private function handleKeyFocusChange(event:FocusEvent):void
		{
			if(event.keyCode == 9)
			{
				event.preventDefault();
				event.stopImmediatePropagation();
				var evt:EditorEvent = new EditorEvent(EditorEvent.COMPLETE_WORD, true);
				evt.message = StringUtil.trim(textArea.text);
				dispatchEvent(evt);
			}
		}
		
		public function get text():String
		{
			return textArea.text;
		}
		
		public function set text(t:String):void
		{
			textArea.text = t;
		}
		
		private function _handleKeyUp(event:KeyboardEvent):void {
			if(13 == event.charCode && !event.altKey) {
				event.stopPropagation();
				textArea.text = "";
			}
		}
		
		private function _fireMessageCreated():void {
			var editorEvent:EditorEvent = new EditorEvent(EditorEvent.MESSAGE_CREATED, true);
			editorEvent.message = StringUtil.trim(textArea.text);
			if(editorEvent.message.length > 0) {
				dispatchEvent(editorEvent);
			}
		}
		
		public function focus():void {
			focusManager.setFocus(textArea);
		}
	
	]]>
	</mx:Script>
	<mx:ToolBar id="toolbar" width="100%" height="100">
		<mx:Label text="Leave Chat" />
	</mx:ToolBar>
	<mx:TextArea keyFocusChange="handleKeyFocusChange(event)" id="textArea" height="100%" width="100%" minHeight="0" minWidth="0" />
</mx:Canvas>
