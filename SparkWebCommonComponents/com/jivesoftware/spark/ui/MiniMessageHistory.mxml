<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" verticalScrollPolicy="on" verticalGap="0" horizontalGap="0" backgroundColor="white" keyDown="handleKeys(event)" mouseDown="beginSelectionRect(event)" mouseUp="endSelectionRect(event)" mouseMove="updateSelectionRect(event)" creationComplete="init()">
<mx:Script><![CDATA[
		import com.jivesoftware.spark.ScrollWheelManager;
		import com.jivesoftware.spark.utils.UniqueingQueue;
		import com.jivesoftware.spark.utils.Key;
		import flexlib.containers.SuperTabNavigator;
		import mx.core.UIComponent;
		import mx.events.ChildExistenceChangedEvent;
		import mx.events.FlexEvent;
		import mx.controls.HRule;
		
		private var scrollTimer:Timer = new Timer(100, 1);
	
		private var _userMessageHighlight:Object = {
			user: ["#E9F1FB", "#F2F9FF"],
			selected: ["#F7F8E1", "#FFFFDB"]
		}
		
		private var _currentMessageBox:MiniMessageBox;
		
		private var selectionRect:Rectangle;
		
		private var activityHistory:UniqueingQueue = new UniqueingQueue();
		
		protected function init():void
		{
			ScrollWheelManager.registerForScrollEvents(this);
	/*		stage.addEventListener(KeyboardEvent.KEY_DOWN, function(evt:KeyboardEvent):void {
				//FIXME: this dependency is fragile, but we aren't getting keyboard events from the history
				if(evt.target is SuperTabNavigator)
				{
					switch(Key.numToChar(evt.charCode))
					{
						case 'c':
						case 'C':
							copySelectedMessages();
							break;
						default:
							trace("Key code is " + evt.keyCode + ", and char code is " + evt.charCode);
					}
				}
			});*/
			scrollTimer.addEventListener(TimerEvent.TIMER_COMPLETE, _adjustHistory);
			callLater(_adjustHistory, [true]);
		}
		
		public function getMostRecentlyActiveUserName(prefix:String = "", startUserName:String = null):String
		{
			prefix = prefix.toLowerCase();
			var result:String = null;
			for(var index:uint = startUserName ? activityHistory.indexOf(startUserName) + 1 : 0; index < activityHistory.length; index++)
			{
				result = activityHistory[index];
				if(result.toLowerCase().indexOf(prefix) == 0)
					return result;
			}
			return null;
		}
		
		private function copySelectedMessages():void
		{
			trace("Copy!");
		}
		
		protected function beginSelectionRect(evt:MouseEvent):void
		{
		//	selectionRect = new Rectangle(evt.stageX, evt.stageY);
		//	selectMessagesInRect(absRect(selectionRect));
		}
		
		public function setFocused(flag:Boolean):void
		{
			trace('focus');
		}
		
		protected function endSelectionRect(evt:MouseEvent):void
		{
			selectionRect = null;
		}
		
		protected function updateSelectionRect(evt:MouseEvent):void
		{
			if(!selectionRect)
				return;
			selectionRect.width = evt.stageX - selectionRect.x;
			selectionRect.height = evt.stageY - selectionRect.y;
			selectMessagesInRect(absRect(selectionRect));
		}
		
		public function get selectedMessages():Array
		{
			var results:Array = [];
			for each(var element:* in getChildren())
			{
				if(element is MiniMessageBox)
				{
					for each(var message:MessageElement in (element as MiniMessageBox).messageElements)
					{
						if(message.selected)
							results.push(message);
					}
				}
			}
			return results;
		}
		
		protected function handleKeys(event:KeyboardEvent):void
		{
			if(event.ctrlKey)
			{
				var foo:Array;
				foo.concat([]);
			//	if(event.
			}
		}
		
		//converts a Rectangle with possibly negative width or height into the positive width/height Rectangle it represents
		protected function absRect(rect:Rectangle):Rectangle
		{
			return new Rectangle(
				rect.x - (rect.width < 0 ? Math.abs(rect.width) : 0), 
				rect.y - (rect.height < 0 ? Math.abs(rect.height) : 0), 
				Math.abs(rect.width), 
				Math.abs(rect.height)
			);
		}
		
		protected function selectMessagesInRect(rect:Rectangle):void
		{
			for each(var element:* in getChildren())
			{
				if(element is MiniMessageBox)
				{
					for each(var message:MessageElement in (element as MiniMessageBox).messageElements)
					{
						message.selected = message.getRect(stage).intersects(rect);
					}
				}
			}
		}

		public function addSystemMessage(messageText:String, messageDate:Date, userId:String = void):void {
			if(!_currentMessageBox || _currentMessageBox.type == "system" ||  _currentMessageBox.userId != null) {
				_currentMessageBox = _createMessageBox(messageDate);
				if(userId) {
					_currentMessageBox.userId = userId;
				}
				_currentMessageBox.type = "system";
			}
			_currentMessageBox.addMessage(messageText, "system");
		}
		
		public function addUserMessage(userId:String, username:String, messageText:String, messageDate:Date, type:String = void):void {
			activityHistory.unshift(username);
			if(!_currentMessageBox || _currentMessageBox.type == "system" || _currentMessageBox.userId != userId) {
				_currentMessageBox = _createMessageBox(messageDate);
				_currentMessageBox.userId = userId;
				_currentMessageBox.username = username;
			}
			
			if(_userMessageHighlight[type]) {
				_currentMessageBox.setMessageHighlight(_userMessageHighlight[type][0], _userMessageHighlight[type][1]);
			}
			
			_currentMessageBox.addMessage(messageText);
		}
		
		public function setUserMessageType(userId:String, type:String = null):void {
			if(type && !_userMessageHighlight[type]) {
				return;
			}
			
			var userColor:String = (type ? _userMessageHighlight[type][0] : null);
			var messageColor:String = (type ? _userMessageHighlight[type][1] : null);
			
			for each(var element:UIComponent in getChildren())
			{
				if ((element is MiniMessageBox) && (element as MiniMessageBox).userId == userId) {
					(element as MiniMessageBox).setMessageHighlight(userColor, messageColor);
				}
			}
		}
		
		private function _createMessageBox(date:Date):MiniMessageBox {
			var messageBox:MiniMessageBox = new MiniMessageBox();
			messageBox.date = date;
			var queueScroll:Function = function():void { 
				scrollTimer.reset();
				scrollTimer.start();
			};
			messageBox.addEventListener(FlexEvent.CREATION_COMPLETE, queueScroll);
			messageBox.addEventListener(ChildExistenceChangedEvent.CHILD_ADD, queueScroll);
			messageBox.percentWidth = 100;
			if(numChildren > 0)
			{
				var rule:HRule = new HRule();
				rule.percentWidth = 100;
				addChild(rule);
			}
			addChild(messageBox)
			return messageBox;
		}
		
		private function _adjustHistory(force:Boolean=false):void {
			if(force || verticalScrollPosition >= maxVerticalScrollPosition - 500)
				verticalScrollPosition = maxVerticalScrollPosition;
		}
	]]></mx:Script>
</mx:VBox>
