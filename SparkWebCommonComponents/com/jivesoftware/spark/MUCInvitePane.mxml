<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<mx:VBox xmlns:sho="sho.ui.*" xmlns:comp="com.jivesoftware.spark.*" horizontalAlign="center" xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Style>
		.title {
			fontWeight: bold;
			fontSize: 12pt;
		}
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
			import org.jivesoftware.xiff.data.im.RosterItem;
			import com.jivesoftware.spark.utils.UniqueingQueue;
			import org.jivesoftware.xiff.data.forms.FormExtension;
			import org.jivesoftware.xiff.data.Extension;
			import org.jivesoftware.xiff.data.forms.FormField;
			import org.jivesoftware.xiff.util.Callback;
			import org.jivesoftware.xiff.events.SearchPrepEvent;
			import org.jivesoftware.xiff.data.search.SearchItem;
			import org.jivesoftware.xiff.data.search.SearchExtension;
			import org.jivesoftware.xiff.data.XMPPStanza;
			import com.jivesoftware.spark.managers.UserSearchManager;
			import mx.events.CollectionEvent;
			import org.jivesoftware.xiff.data.im.RosterItemVO;
			import org.jivesoftware.xiff.im.Roster;
			import mx.collections.ListCollectionView;
			import org.jivesoftware.xiff.conference.Room;
			import mx.core.Application;
			import org.jivesoftware.xiff.core.JID;
			import mx.core.UITextField;
			import mx.managers.FocusManager;
			import mx.collections.ArrayCollection;

			import com.jivesoftware.spark.SparkGroupChat;
			import com.jivesoftware.spark.managers.SparkManager;
			import com.jivesoftware.spark.managers.Localizator;
			
			[Event(name="close", type="flash.events.Event")]
			
			public var room:Room;
			
			[Bindable]
			protected var completionChoices:ArrayCollection = new ArrayCollection();
			
			protected var cachedSearches:Object = {};
			protected var searchManager:UserSearchManager;
			
			public function rebuildCompletionList():void
			{
				var rebuild:Function = function(evt:*=null):void {
					for each(var contact:RosterItemVO in SparkManager.roster)
					{
						if(completionChoices.source.indexOf(contact) == -1)
							completionChoices.addItem(contact);
					}
				};
				SparkManager.roster.removeEventListener(CollectionEvent.COLLECTION_CHANGE, rebuild);
				SparkManager.roster.addEventListener(CollectionEvent.COLLECTION_CHANGE, rebuild);
				rebuild();
			}
			
			protected function searchForContacts():void
			{
				if(nameField.text.length == 0 || cachedSearches[nameField.text.charAt(0)] != null)
					return;
				else
				{
					cachedSearches[nameField.text.charAt(0)] = new Date(); //timestamp in case we decide to invalidate them at some point

					searchManager = UserSearchManager.sharedInstance;
					searchManager.addEventListener(SearchPrepEvent.SEARCH_PREP_COMPLETE, runSearch);
					searchManager.server = SparkManager.connectionManager.connection.jid.domain;
				}
			}
			
			protected function runSearch(evt:*=null):void
			{
				if(!searchManager || !searchManager.searchReady)
					return;
				
				var fields:Array = searchManager.getDataFormFields(searchManager.services[0].JID);
				for each(var field:FormField in fields)
				{
					if(field.name.toLowerCase().indexOf("name") > -1 && field.type == "boolean")
					{
						field.value = "1";
					} 
					else if (field.name.toLowerCase().indexOf("search") > -1 && field.type == "text-single")
					{
						field.value = nameField.text + "*";
					}
				}
				searchManager.performDataFormSearch(searchManager.services[0].JID, fields, new Callback(this, populateFromSearch));	
			}
			
			protected function populateFromSearch(resultsIq:XMPPStanza):void
			{
				var extensions:Array = resultsIq.getAllExtensionsByNS(SearchExtension.NS);
				if (extensions == null || extensions.length < 1) 
					return;
				
				var searchItems:Array = extensions[0]._exts["jabber:x:data"][0].getAllItems();
				
				var processResults:Function;
				processResults = function(idx:int):void {
					completionChoices.disableAutoUpdate();
					for (var i:int = idx;i < searchItems.length && i < (idx + 10); i++)
					{
						for each(var field:FormField in searchItems[i])
						{
							if(field.name.toLowerCase() == "jid")
							{
								var item:RosterItemVO = RosterItemVO.get(new JID(field.value), true);
								if(completionChoices.source.indexOf(item) == -1)
									completionChoices.addItem(item);
							}
						}
					}
					completionChoices.enableAutoUpdate();
					if(i != idx)
						callLater(processResults, [i]);
				}
				processResults(0);
			}
            
            /**
             * Sends the conference invitation.
             */
            protected function send():void 
            {
            	room.invite(new JID(nameField.text), "Please join me to talk about " + room.subject);
            	nameField.text = "";
            	dispatchEvent(new Event('close'));
            }
		]]>
	</mx:Script>
	
	
	<mx:TextArea borderStyle="none" width="{width - 16}" focusEnabled="false" backgroundAlpha="0.0" text="Type the name of the person you'd like to invite" />
	<sho:CompletionInput width="{width - 16}" itemRenderer="com.jivesoftware.spark.BuddyRenderer" change="{searchForContacts()}" dataProvider="{completionChoices}" id="nameField" />
	<mx:HBox>
		<mx:Button click="dispatchEvent(new Event('close'))" label="Cancel"/>
		<mx:Button click="send()" label="Invite"/>
	</mx:HBox>
	
</mx:VBox>
