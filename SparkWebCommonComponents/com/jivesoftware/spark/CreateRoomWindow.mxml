<?xml version="1.0" encoding="utf-8"?>

<!--
    This file is part of SparkWeb.
    
    SparkWeb is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    SparkWeb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with SparkWeb.  If not, see <http://www.gnu.org/licenses/>.
-->


<comp:ColorShiftingTitleWindow xmlns:comp="com.jivesoftware.spark.*" xmlns:mx="http://www.adobe.com/2006/mxml" color="white"
	title="{Localizator.getText('title.create.room.window')}" showCloseButton="true" close="close()" 
	creationComplete="init()">
	<mx:Style>
		.title {
			fontWeight: bold;
			fontSize: 12pt;
		}
		.radioButton {
			color: white;
		}
	</mx:Style>
    <mx:Script>
        <![CDATA[
        	import org.jivesoftware.xiff.core.UnescapedJID;
        	import mx.core.Application;
        	import com.jivesoftware.spark.ContactListContainer;
        	import com.jivesoftware.spark.MUCRoomListItemRenderer;
        	import com.jivesoftware.spark.MUCRoomList;
        	import com.jivesoftware.spark.MUCList;
        	import org.jivesoftware.xiff.conference.Room;
        	import org.jivesoftware.xiff.core.XMPPConnection;
        	import org.jivesoftware.xiff.im.Roster;       
        	import com.jivesoftware.spark.managers.*;
            import mx.managers.PopUpManager;
            import mx.controls.Text;
            
            [Bindable]
            private var conferenceServer:String;
            
            [Bindable]
			private var dropShadowFilters:Array = [new DropShadowFilter(0, 45, 0.0, 1.0, 2.0)];
           
            // Event handler for the OK button.
            private function createRoom():void {
            	if ((nameField.text.length == 0) || (nameField.text.indexOf(' ') >= 0))
            	{
            		SparkManager.displayError(Localizator.getText('muc.error.invalid.room.name'), Localizator.getText('muc.error'), false);
            		close();
            		return;
            	}
            	
                var roomName:String = nameField.text;
                var room:Room = new Room(SparkManager.connectionManager.connection);
                room.roomJID = new UnescapedJID(roomName + "@" + conferenceServer);
                
                if (configType.selectedValue == "custom")
                {
                	var mucConfigurationWindow:MUCConfigurationWindow =
                			MUCConfigurationWindow(PopUpManager.createPopUp(DisplayObjectContainer(Application.application), MUCConfigurationWindow));
  	    			PopUpManager.centerPopUp(mucConfigurationWindow);
  	    			mucConfigurationWindow.show(room);
  	    			room.join(true);
                }
                else
                	room.join();
                
                //TODO: encapsulation violation
                var serverList:MUCRoomList = ContactListContainer.conferenceList.getServerList(conferenceServer);
                serverList.addItems([{jid:room.roomJID, name:room.roomName}]);
                close();
            }
            
            private function close():void {
            	PopUpManager.removePopUp(this);
            }
            
            public function show(server:String):void {
            	conferenceServer = server;
            	focusManager.setFocus(nameField);
            }
            
            public function init():void {
           		this.titleTextField.filters = [new DropShadowFilter(0, 45, 0.0, 1.0, 6.0)];
           		this.titleTextField.styleName = "title";
            }
            
            public static function showCreateRoomWindow(server:String):void
			{
				var createRoomWindow:CreateRoomWindow = CreateRoomWindow(PopUpManager.createPopUp(DisplayObjectContainer(Application.application), CreateRoomWindow));
	            PopUpManager.centerPopUp(createRoomWindow);
	            createRoomWindow.show(server);
			}
        ]]>
    </mx:Script>

	<mx:Form id="myForm" defaultButton="{submitButton}">
        <mx:FormItem label="{Localizator.getText('label.room.name')}">
            <mx:TextInput id="nameField" />
        </mx:FormItem>
        <mx:FormItem label="{Localizator.getText('label.server')}">
        	<mx:Label text="{conferenceServer}" />
        </mx:FormItem>
        <mx:FormItem label="Configuration" verticalGap="0">
        	<mx:RadioButtonGroup id="configType" />
        	<mx:RadioButton groupName="configType" label="Default" value="default" styleName="radioButton" selected="true"/>
        	<mx:RadioButton groupName="configType" label="Customize" value="custom" styleName="radioButton" />
        </mx:FormItem>
    </mx:Form>
    
	<mx:ControlBar horizontalAlign="right">
		<mx:Button color="white" filters="{dropShadowFilters}" label="{Localizator.getText('label.cancel')}" click="{close();}" />
		<mx:Button id="submitButton" color="white" filters="{dropShadowFilters}" label="{Localizator.getText('label.submit')}" click="{createRoom();}" />
	</mx:ControlBar>
</comp:ColorShiftingTitleWindow>
